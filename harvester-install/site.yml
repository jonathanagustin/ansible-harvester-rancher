---
# Playbook: Install Harvester on Dell Servers via iPXE
#
# This playbook orchestrates the installation of Harvester on Dell servers using iPXE boot.
# It performs the following high-level steps:
# 1. Loads secrets from a JSON file for secure credential management
# 2. Verifies Dell server compatibility
# 3. Checks iDRAC connectivity
# 4. Prepares the PXE environment
# 5. Configures servers for PXE boot
# 6. Initiates and monitors the Harvester installation process
# 7. Performs post-installation verifications
# 8. Cleans up temporary files and configurations
#
# Prerequisites:
# - Ansible 2.9 or higher
# - Dell servers with iDRAC access
# - Proper network configuration for PXE booting
# - Harvester ISO and required files accessible
#
# Usage: ansible-playbook -i inventory.ini playbook.yml [-e variable=value]
#
# Important variables:
# - pxe_harvester_version: Version of Harvester to install (default: v1.3.1)
# - idrac_creds: Dictionary containing iDRAC credentials (loaded from external file)
# - cleanup_temp_files: Boolean to determine if temporary files should be cleaned up (default: true)

- name: Install Harvester on Dell Servers via iPXE
  hosts: idrac_hosts
  gather_facts: false # We don't need to gather facts as we're working with iDRAC
  vars:
    # Load secrets from an external JSON file for enhanced security
    # This file should be properly secured and not committed to version control
    secrets: "{{ lookup('file','secrets.json') | from_json }}"

  # Define the roles and collections used in this playbook
  roles:
    - harvester_install # Custom role for Harvester installation tasks
  collections:
    - containers.podman # Used for container management (e.g., for PXE services)
    - dellemc.openmanage # Used for iDRAC interactions
    - community.general # Provides additional Ansible modules

  pre_tasks:
    # Include documentation for all variables used in the playbook
    # This helps in understanding the purpose and expected values of each variable
    - name: Include variable documentation
      ansible.builtin.include_vars:
        file: vars_documentation.yml
      tags:
        - always
        - documentation

    # Verify that we're running on Dell servers
    # This playbook is specifically designed for Dell hardware
    - name: Verify Dell server compatibility
      ansible.builtin.assert:
        that:
          - ansible_facts['system_vendor'] == "Dell Inc."
        msg: "This playbook is designed for Dell servers only"
      tags:
        - always
        - verification

  tasks:
    # Load iDRAC credentials from a separate file for improved security
    # This allows for easier credential management without exposing sensitive information
    - name: Include iDRAC credential variables
      include_vars:
        file: "{{ playbook_dir }}/group_vars/idrac_credentials.yml"
        name: idrac_creds
      tags:
        - always
        - idrac

    # Verify connectivity to iDRAC
    # This ensures that we can communicate with the iDRAC interface before proceeding
    - name: Verify iDRAC connectivity
      dellemc.openmanage.idrac_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: idrac_result
      failed_when: idrac_result.failed
      retries: 3
      delay: 10
      until: not idrac_result.failed
      tags:
        - always
        - idrac
        - verification

    # Prepare the PXE environment for Harvester installation
    # This task sets up DHCP, TFTP, and HTTP servers for PXE booting
    - name: Prepare PXE environment
      include_role:
        name: harvester_install
        tasks_from: prepare_pxe
      tags:
        - pxe
        - setup

    # Configure the Dell servers to boot from PXE
    # This involves setting BIOS options and configuring the boot order
    - name: Configure servers for PXE boot
      include_role:
        name: harvester_install
        tasks_from: configure_pxe_boot
      tags:
        - pxe
        - boot

    # Start the Harvester installation process
    # This initiates the PXE boot and begins the Harvester OS installation
    - name: Initiate Harvester installation
      include_role:
        name: harvester_install
        tasks_from: install_harvester
      tags:
        - install

    # Monitor the progress of the Harvester installation
    # This task checks the installation status and waits for completion
    - name: Monitor installation progress
      include_role:
        name: harvester_install
        tasks_from: monitor_installation
      tags:
        - install
        - monitor

    # Perform verification checks after the installation
    # This ensures that Harvester is properly installed and configured
    - name: Perform post-installation verifications
      include_role:
        name: harvester_install
        tasks_from: post_install_verification
      tags:
        - verification
        - post-install

  post_tasks:
    # Clean up temporary files created during the installation process
    # This helps maintain a clean environment after installation
    - name: Cleanup temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ role_path }}/files/data/harvester.iso"
        - "{{ role_path }}/files/data/harvester-vmlinuz"
        - "{{ role_path }}/files/data/harvester-initrd"
        - "{{ role_path }}/files/data/harvester-rootfs"
      when: cleanup_temp_files | default(true)
      tags:
        - cleanup

  handlers:
    # Handler to reboot the server if necessary
    # This is triggered when certain configuration changes require a reboot
    - name: Reboot server
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "reboot"
      listen: "reboot_required"

    # Handler to refresh the Ansible inventory
    # This ensures that any changes to the inventory during installation are reflected
    - name: Update inventory
      meta: refresh_inventory
      listen: "update_inventory"
