---
# Harvester Installation on Dell Servers via iPXE
#
# This playbook orchestrates the installation of Harvester on Dell servers using iPXE boot and iDRAC for management.
# It covers the entire process from initial checks to post-installation verification and cleanup.
#
# Major steps include:
#   - Pre-flight checks
#   - iDRAC and server configuration
#   - PXE environment preparation
#   - Pre-installation server configuration
#   - Harvester installation and monitoring
#   - Post-installation verification
#   - Cleanup and finalization
#
# Prerequisites:
#   - Ansible 2.9 or newer
#   - dellemc.openmanage collection installed
#   - iDRAC credentials configured in inventory or group_vars
#   - Harvester ISO available at a specified path
#   - Network configuration for PXE and Harvester cluster defined
#
# Usage:
#   ansible-playbook -i inventory main.yml [-e variable=value]
#
# Version: 1.1

# Pre-flight checks
# These checks ensure that all necessary prerequisites are met before proceeding with the installation.
# Failing these checks will halt the playbook execution to prevent partial or failed installations.
- name: Perform pre-flight checks
  block:
    # Verify that the installed Ansible version meets the minimum requirement
    - name: Verify Ansible version
      assert:
        that: "ansible_version.full is version_compare('2.9', '>=')"
        msg: "This playbook requires Ansible 2.9 or newer. Please upgrade your Ansible installation."

    # Check that all required variables are defined in the inventory or group_vars
    - name: Check for required variables
      assert:
        that:
          - idrac_creds is defined
          - harvester_iso_path is defined
          - cluster_vip is defined
        msg: >
          Missing required variables. Please ensure the following are defined:
          - idrac_creds (iDRAC credentials)
          - harvester_iso_path (path to Harvester ISO)
          - cluster_vip (Virtual IP for the Harvester cluster)

    # Verify iDRAC connectivity to ensure we can manage the servers
    - name: Verify iDRAC connectivity
      dellemc.openmanage.idrac_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: idrac_check
      failed_when: idrac_check.failed
  rescue:
    # Log detailed information if pre-flight checks fail
    - name: Log pre-flight check failure
      debug:
        msg: >
          Pre-flight checks failed. Please address the following issues before proceeding:
          1. Ensure Ansible 2.9 or newer is installed
          2. Verify all required variables are defined in your inventory or group_vars
          3. Check iDRAC connectivity and credentials
      failed_when: true

# iDRAC and Server Configuration
# This step configures iDRAC settings, RAID, and other server-specific configurations
# It's crucial for ensuring the servers are in the correct state before proceeding with the installation
- name: Configure iDRAC and server settings
  import_tasks: idrac_configuration.yml
  tags:
    - idrac
    - configuration

# PXE Environment Preparation
# This step sets up the necessary infrastructure for PXE booting the servers.
# It includes configuring DHCP, TFTP, and HTTP servers.
- name: Prepare PXE environment
  import_tasks: prepare_pxe.yml
  run_once: true
  tags:
    - pxe
    - setup

# Pre-installation Server Checks and Configuration
# These checks ensure that each server meets the hardware and network requirements for Harvester.
# It may include checks for minimum CPU, RAM, disk space, and network configuration.
- name: Run pre-installation checks and configuration
  import_tasks: pre_installation_tasks.yml
  tags:
    - pre-install
    - checks

# Server Configuration Backup
# This step creates a backup of critical server configurations to allow for rollback if needed.
# It's crucial for recovering the system state in case of installation failure.
- name: Backup current server configuration
  block:
    # Backup current BIOS settings
    - name: Backup BIOS settings
      dellemc.openmanage.idrac_bios:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        command: GetAttributes
      register: original_bios_settings

    # Backup current network configuration
    - name: Backup network configuration
      dellemc.openmanage.idrac_network:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        command: GetNetworkSettings
      register: original_network_config

    # Save the backup configurations for potential rollback
    - name: Save backup configurations
      set_fact:
        server_backup:
          bios: "{{ original_bios_settings }}"
          network: "{{ original_network_config }}"
  rescue:
    # Log if backup fails, but allow the playbook to continue
    - name: Log backup failure
      debug:
        msg: >
          Failed to backup server configuration. The installation will proceed, but rollback capabilities may be limited.
          It is recommended to manually backup server configurations before proceeding.
  tags:
    - backup
    - pre-install

# Configure Dell iDRAC for PXE Boot
# This step configures the server's BIOS to enable PXE booting.
# It's critical for ensuring the servers will boot from the network for Harvester installation.
- name: Configure PXE boot settings
  block:
    # Set the persistent boot device to PXE
    - name: Set persistent boot device to PXE
      dellemc.openmanage.idrac_bios:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        attributes:
          BootMode: "Bios"
          BootSeqRetry: "Enabled"
          FirstBootDevice: "PXE"
      register: bios_result
      retries: 3
      delay: 30
      until: bios_result is success

    # Configure one-time PXE boot
    # This ensures that the server will attempt PXE boot on the next restart, even if the persistent setting fails.
    - name: Set one-time boot device to PXE
      dellemc.openmanage.idrac_boot:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        boot_device: "PXE"
        boot_mode: "OneTime"
      register: boot_result
      retries: 3
      delay: 30
      until: boot_result is success
  tags:
    - pxe
    - boot

# Manage System Power State
# This step ensures the server is powered on and ready for PXE boot.
- name: Manage system power
  block:
    # Check the current power state of the system
    - name: Get system power state
      dellemc.openmanage.idrac_power_state_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: power_state

    # Restart the system if it's already powered on
    - name: Restart system power if on
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "reboot"
      when: power_state.power_state == "On"

    # Power on the system if it's currently off
    - name: Turn system power on if off
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "on"
      when: power_state.power_state == "Off"
  rescue:
    # Log any failures in power management
    - name: Log power management failure
      debug:
        msg: >
          Failed to manage system power. This could be due to iDRAC connectivity issues or insufficient permissions.
          Manual intervention may be required to ensure the server is powered on and ready for PXE boot.
      failed_when: true
  tags:
    - power
    - pre-install

# Monitor Harvester Installation Progress
# This step monitors the progress of the Harvester installation.
- name: Monitor Harvester installation
  block:
    # Set a flag to indicate that installation has started
    - name: Set installation started flag
      set_fact:
        installation_started: true

    # Wait for the Harvester installation to complete
    # This checks if SSH (port 22) becomes available, indicating a successful OS boot
    - name: Wait for Harvester installation to complete
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 300 # Wait 5 minutes before starting to check
        timeout: 3600 # Total timeout of 1 hour
      register: installation_wait_result

    # Check installation progress via iDRAC if SSH wait fails
    - name: Check installation progress via iDRAC
      dellemc.openmanage.idrac_lifecycle_controller_job_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: lc_job_info
      when: installation_wait_result.failed

    # Evaluate the overall installation status
    - name: Evaluate installation status
      set_fact:
        installation_completed: "{{ not installation_wait_result.failed and (lc_job_info.jobs | default([]) | selectattr('job_status', 'equalto', 'Failed') | list | length == 0) }}"
  rescue:
    # Log any failures in monitoring the installation
    - name: Log installation monitoring failure
      debug:
        msg: >
          Failed to monitor installation progress. This could be due to network issues, iDRAC problems, or an unexpected error during installation.
          Manual verification of the installation status is required.
      failed_when: true
  tags:
    - install
    - monitor

# Post-installation Tasks
# These tasks verify the installation and perform any necessary post-install configurations.
- name: Perform post-installation tasks
  block:
    # Run post-installation verification tasks
    - name: Run post-installation verifications
      import_tasks: post_installation_tasks.yml
      when: installation_completed | default(false)

    # Verify that essential Harvester services are running
    - name: Verify Harvester services
      ansible.builtin.command: kubectl get pods -n harvester-system
      register: harvester_pods
      changed_when: false
      failed_when: "'Running' not in harvester_pods.stdout"
      delegate_to: localhost
      run_once: true
      when: installation_completed | default(false)

    # Perform any necessary cleanup tasks
    - name: Perform cleanup tasks
      import_tasks: cleanup_tasks.yml

    # Log successful installation
    - name: Log successful installation
      debug:
        msg: "Harvester installation completed successfully on {{ inventory_hostname }}"
      changed_when: true
      notify: Log Installation Success
      when: installation_completed | default(false)
  rescue:
    # Log any failures in post-installation tasks
    - name: Log post-installation task failure
      debug:
        msg: >
          Post-installation tasks failed. The Harvester software may be installed, but the system might not be fully operational.
          Manual verification and potential troubleshooting are required.
      failed_when: true
  tags:
    - post-install
    - verification

# Handle Installation Failure
# This step implements rollback procedures and notifies administrators in case of installation failure.
- name: Handle installation failure
  block:
    # Attempt to rollback changes if installation failed
    - name: Implement rollback on failure
      import_tasks: rollback_tasks.yml
      when: not installation_completed | default(true)

    # Notify administrators of the installation failure
    - name: Notify administrators of failure
      mail:
        to: "{{ admin_email }}"
        subject: "Harvester installation failed on {{ inventory_hostname }}"
        body: >
          The Harvester installation on {{ inventory_hostname }} has failed.
          Rollback has been attempted. Please check the system and logs for more information.
          Timestamp: {{ ansible_date_time.iso8601 }}
      delegate_to: localhost
      when: not installation_completed | default(true)
  always:
    # Update the Ansible inventory with the installation status
    - name: Update inventory status
      add_host:
        name: "{{ inventory_hostname }}"
        groups: "{{ 'harvester_installed' if installation_completed | default(false) else 'installation_failed' }}"
  tags:
    - error-handling
    - notification

# Final Cluster Verification (for multi-node setups)
# This step verifies that the Harvester cluster is fully operational.
- name: Verify Harvester cluster
  block:
    # Check the status of all nodes in the cluster
    - name: Check cluster status
      ansible.builtin.command: kubectl get nodes
      register: cluster_status
      changed_when: false
      failed_when: cluster_status.rc != 0 or cluster_status.stdout_lines | length != groups['idrac_hosts'] | length
      delegate_to: localhost
      run_once: true

    # Verify cluster functionality by creating a test deployment
    - name: Verify cluster functionality
      ansible.builtin.command: kubectl create deployment test-nginx --image=nginx
      register: test_deployment
      changed_when: false
      failed_when: test_deployment.rc != 0
      delegate_to: localhost
      run_once: true

    # Clean up the test deployment
    - name: Remove test deployment
      ansible.builtin.command: kubectl delete deployment test-nginx
      changed_when: false
      delegate_to: localhost
      run_once: true
  rescue:
    # Log any failures in cluster verification
    - name: Log cluster verification failure
      debug:
        msg: >
          Cluster verification failed. The Harvester cluster may not be fully operational.
          Please check the kubectl outputs and cluster logs for more information.
      failed_when: true
  always:
    # Generate a detailed installation report
    - name: Generate installation report
      template:
        src: installation_report.j2
        dest: "/var/log/harvester_installation_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost
  tags:
    - cluster
    - verification

  # Handlers
  # These handlers can be called by tasks to perform actions after certain conditions are met
  handlers:
    # Log when the installation is successful
    - name: Log Installation Success
      debug:
        msg: "Harvester installation successful on {{ inventory_hostname }} at {{ ansible_date_time.iso8601 }}"
      listen: "log_installation_success"
