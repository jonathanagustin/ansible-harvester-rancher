# ./harvester-install/roles/harvester_install/tasks/prepare_pxe.yml
---
# Prepare PXE Environment for Harvester Installation
#
# This playbook prepares the PXE environment necessary for booting and installing
# Harvester on Dell servers. It performs the following major steps:
#   1. Download Harvester installation files
#   2. Prepare iPXE boot environment
#   3. Generate configuration files
#   4. Set up DHCP and TFTP servers using containers
#
# Prerequisites:
#   - Ansible 2.9 or newer
#   - containers.podman collection installed
#   - Sufficient disk space for Harvester ISO and other files
#   - Network access to download Harvester files
#   - Permissions to run containers and configure network services
#
# Variables:
#   - pxe_harvester_version: Version of Harvester to install
#   - pxe_iso_url: URL to download Harvester ISO
#   - pxe_kernel_url: URL to download Harvester kernel
#   - pxe_initrd_url: URL to download Harvester initrd
#   - pxe_rootfs_url: URL to download Harvester rootfs
#   - role_path: Path to the current Ansible role
#
# Usage:
#   This playbook is typically called from the main installation playbook
#   and should not be run independently unless testing the PXE environment setup.

# Ensure all required variables are defined before proceeding with PXE preparation
# This step prevents errors later in the playbook due to missing configuration
- name: "Check mandatory variables are defined"
  ansible.builtin.assert:
    that:
      - pxe_harvester_version is defined # Harvester version to be installed
      - pxe_harvester_mgmt_interface is defined # Network interface for Harvester management
      - pxe_harvester_vip is defined # Virtual IP for the Harvester cluster
      - pxe_harvester_vip_mac is defined # MAC address associated with the virtual IP
      - pxe_harvester_osdisk is defined # Disk to be used for Harvester OS installation
      - pxe_harvester_datadisk is defined # Disk to be used for Harvester data storage

# Download the Harvester ISO file
# This ISO contains the full Harvester installation image
- name: Download Harvester ISO
  ansible.builtin.get_url:
    url: "{{ pxe_iso_url }}" # URL of the Harvester ISO
    dest: "{{ role_path }}/files/data/harvester.iso" # Local destination for the ISO
    checksum: "{{ pxe_iso_checksum }}" # Verify the integrity of the downloaded file
    mode: "0644" # Set appropriate file permissions
  register: harvester_iso # Register the result for potential later use

# Download the Harvester kernel
# This is the Linux kernel that will be loaded during PXE boot
- name: Download Harvester kernel
  ansible.builtin.get_url:
    url: "{{ pxe_kernel_url }}"
    dest: "{{ role_path }}/files/data/harvester-vmlinuz"
    checksum: "{{ pxe_kernel_checksum }}"
    mode: "0644"
  register: harvester_kernel

# Download the Harvester initrd (initial ramdisk)
# This contains the initial root filesystem and drivers needed to boot Harvester
- name: Download Harvester initrd
  ansible.builtin.get_url:
    url: "{{ pxe_initrd_url }}"
    dest: "{{ role_path }}/files/data/harvester-initrd"
    checksum: "{{ pxe_initrd_checksum }}"
    mode: "0644"
  register: harvester_initrd

# Download the Harvester rootfs (root filesystem)
# This contains the main Harvester operating system files
- name: Download Harvester rootfs
  ansible.builtin.get_url:
    url: "{{ pxe_rootfs_url }}"
    dest: "{{ role_path }}/files/data/harvester-rootfs"
    checksum: "{{ pxe_rootfs_checksum }}"
    mode: "0644"
  register: harvester_rootfs

# Clone the iPXE repository
# iPXE is an open-source network boot firmware
# We'll use it to create a custom boot image for Harvester installation
- name: Clone iPXE
  ansible.builtin.git:
    repo: "https://github.com/ipxe/ipxe.git"
    dest: "{{ role_path }}/files/data/ipxe"
    single_branch: true # Only clone the master branch to save time and space
    version: master

# Generate a custom iPXE script for Harvester
# This script will tell iPXE how to boot and install Harvester
- name: Generate Harvester iPXE script
  ansible.builtin.template:
    src: harvester.ipxe.j2 # Jinja2 template for the iPXE script
    dest: "{{ role_path }}/files/data/ipxe/src/harvester.ipxe"
    mode: "0644"

# Build the iPXE boot image
# This creates a custom iPXE binary with our Harvester script embedded
- name: Build iPXE
  community.general.make:
    chdir: "{{ role_path }}/files/data/ipxe/src"
    target: bin/undionly.kpxe # The output file we want to create
    params:
      -j: # Use parallel jobs for faster build
      EMBED: harvester.ipxe # Embed our custom iPXE script

# Generate the Harvester configuration file
# This file will be used during the Harvester installation process
- name: Generate Harvester config
  ansible.builtin.template:
    src: harvester.yaml.j2 # Jinja2 template for Harvester config
    dest: "{{ role_path }}/files/data/harvester-config.yaml"
    mode: "0644"

# Generate the dnsmasq configuration
# dnsmasq will serve as our DHCP and TFTP server for PXE booting
- name: Generate dnsmasq config
  ansible.builtin.template:
    src: dnsmasq.conf.j2 # Jinja2 template for dnsmasq config
    dest: "{{ role_path }}/files/data/dnsmasq.conf"
    mode: "0644"

# Ensure containers are running
# This block checks if the required containers are running and starts them if needed
- name: Ensure containers are running
  block:
    - name: Check dnsmasq container
      containers.podman.podman_container_info:
        name: dnsmasq
      register: dnsmasq_info
    - name: Restart dnsmasq if not running
      containers.podman.podman_container:
        name: dnsmasq
        state: started
      when: dnsmasq_info.containers | length == 0 or dnsmasq_info.containers[0].State.Status != "running"
  rescue:
    - name: Handle container failure
      debug:
        msg: "Failed to ensure containers are running. Manual intervention may be required."
      failed_when: true

# Build a custom dnsmasq container image
# This allows us to have a dnsmasq server with our specific configuration
- name: Build dnsmasq image
  become: true # Require elevated privileges
  containers.podman.podman_image:
    name: dnsmasq
    path: "{{ role_path }}/files/dnsmasq" # Path to the Dockerfile and context
  register: dnsmasq_build
  retries: 3
  delay: 5
  until: dnsmasq_build is success

# Run the dnsmasq container
# This starts our DHCP and TFTP server for PXE booting
- name: Run dnsmasq container
  become: true
  containers.podman.podman_container:
    name: dnsmasq
    image: dnsmasq
    network: host # Use host networking for proper DHCP functionality
    ports:
      - "67:67/udp" # DHCP port
    volumes:
      - "{{ role_path }}/files/data/dnsmasq.conf:/etc/dnsmasq.conf" # Mount our custom config
      - "{{ role_path }}/files/data/ipxe/src/bin/undionly.kpxe:/srv/tftp/undionly.kpxe" # Mount iPXE binary
    cap_add:
      - NET_ADMIN # Required capabilities for DHCP
      - NET_RAW
    timeout: 1200
    rm: true # Remove the container when it exits
    state: started
  register: dnsmasq_container
  retries: 3
  delay: 5
  until: dnsmasq_container is success

# Run an nginx container
# This will serve the Harvester installation files over HTTP
- name: Run nginx container
  become: true
  containers.podman.podman_container:
    name: nginx
    image: nginx
    ports:
      - "80:80/tcp" # HTTP port
    volumes:
      - "{{ role_path }}/files/data/harvester.iso:/usr/share/nginx/html/harvester.iso"
      - "{{ role_path }}/files/data/harvester-vmlinuz:/usr/share/nginx/html/harvester-vmlinuz"
      - "{{ role_path }}/files/data/harvester-initrd:/usr/share/nginx/html/harvester-initrd"
      - "{{ role_path }}/files/data/harvester-rootfs:/usr/share/nginx/html/harvester-rootfs"
      - "{{ role_path }}/files/data/harvester-config.yaml:/usr/share/nginx/html/harvester-config.yaml"
    timeout: 1200
    rm: true
    state: started
  register: nginx_container
  retries: 3
  delay: 5
  until: nginx_container is success

# Add a cleanup task
# This task removes temporary files after the installation is complete
- name: Cleanup temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ role_path }}/files/data/harvester.iso"
    - "{{ role_path }}/files/data/harvester-vmlinuz"
    - "{{ role_path }}/files/data/harvester-initrd"
    - "{{ role_path }}/files/data/harvester-rootfs"
    - "{{ role_path }}/files/data/harvester-config.yaml"
  when: cleanup_temp_files | default(true)
