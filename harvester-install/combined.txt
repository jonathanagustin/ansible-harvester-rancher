
---
./install_dependencies.sh


#!/bin/bash

# install_dependencies.sh
#
# This script installs all necessary dependencies for the Harvester installation playbook.
# It sets up Python, Ansible, and required Python packages.
#
# Usage: ./install_dependencies.sh
#
# Note: This script should be run with sudo privileges if not run as root.

# Exit immediately if a command exits with a non-zero status
set -e

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install a package using apt-get
install_package() {
    echo "Installing $1..."
    sudo apt-get install -y "$1" || {
        echo "Failed to install $1. Please check your internet connection and try again."
        exit 1
    }
}

# Update package lists
echo "Updating package lists..."
sudo apt-get update -y || {
    echo "Failed to update package lists. Please check your internet connection and try again."
    exit 1
}

# Install Python 3 and pip if not already installed
if ! command_exists python3; then
    install_package python3
    install_package python3-pip
else
    echo "Python 3 and pip are already installed."
fi

# Create a virtual environment
echo "Creating a virtual environment..."
python3 -m venv harvester_venv || {
    echo "Failed to create virtual environment. Please ensure you have venv installed."
    exit 1
}

# Activate the virtual environment
echo "Activating virtual environment..."
source harvester_venv/bin/activate || {
    echo "Failed to activate virtual environment. Please check the harvester_venv directory."
    exit 1
}

# Upgrade pip within the virtual environment
echo "Upgrading pip..."
pip install --upgrade pip || {
    echo "Failed to upgrade pip. Please check your internet connection and try again."
    exit 1
}

# Install Ansible Core if not already installed
if ! command_exists ansible; then
    echo "Installing Ansible Core..."
    pip install "ansible-core>=2.17.2,<3.0.0" || {
        echo "Failed to install Ansible Core. Please check your internet connection and try again."
        exit 1
    }
else
    echo "Ansible is already installed. Checking version..."
    ansible_version=$(ansible --version | grep "core" | awk '{print $2}')
    if [[ "$(printf '%s\n' "2.17.2" "$ansible_version" | sort -V | head -n1)" != "2.17.2" ]]; then
        echo "Upgrading Ansible Core..."
        pip install --upgrade "ansible-core>=2.17.2,<3.0.0" || {
            echo "Failed to upgrade Ansible Core. Please check your internet connection and try again."
            exit 1
        }
    else
        echo "Ansible Core version is sufficient."
    fi
fi

# Install required Python packages
echo "Installing required Python packages..."
pip install -r requirements.txt || {
    echo "Failed to install required Python packages. Please check the requirements.txt file and your internet connection."
    exit 1
}

# Install required Ansible collections
echo "Installing required Ansible collections..."
ansible-galaxy collection install dellemc.openmanage containers.podman community.general || {
    echo "Failed to install required Ansible collections. Please check your internet connection and try again."
    exit 1
}

# Install additional packages in the virtual environment
echo "Installing additional packages in the virtual environment..."
pip install omsdk redfish || {
    echo "Failed to install additional packages. Please check your internet connection and try again."
    exit 1
}

# Verify installations
echo "Verifying installations..."
python3 --version
ansible --version
pip list | grep -E "omsdk|redfish|ansible-core"
ansible-galaxy collection list | grep -E "dellemc.openmanage|containers.podman|community.general"

# Create necessary directories if they don't exist
echo "Creating necessary directories..."
mkdir -p roles/harvester_install/files/{data,dnsmasq}

echo "Installation complete!"
echo "To use the installed packages, remember to activate the virtual environment with:"
echo "source harvester_venv/bin/activate"

# Deactivate the virtual environment
deactivate

---
./inventory.ini


# inventory.ini
#
# This file defines the inventory of hosts for the Harvester installation playbook.
# It lists all the Dell servers that will be part of the Harvester cluster.
#
# Format:
# [group_name]
# hostname ansible_host=ip_address
#
# Note: Ensure that all hosts are reachable and have proper DNS resolution.

[idrac_hosts]
server1 ansible_host=192.168.1.101
server2 ansible_host=192.168.1.102
server3 ansible_host=192.168.1.103
server4 ansible_host=192.168.1.104

# You can add more groups if needed, for example:
# [control_plane]
# server1
# server2
#
# [workers]
# server3
# server4

# Define variables for all hosts
[all:vars]
ansible_connection=ssh
ansible_user=root
ansible_ssh_private_key_file=/path/to/your/private/key

# Note: For security reasons, it's recommended to use SSH key-based authentication
# instead of passwords. If you must use passwords, consider using Ansible Vault
# to encrypt them.
---
./playbook.yml


---
# Playbook: Install Harvester on Dell Servers via iPXE
#
# This playbook orchestrates the installation of Harvester on Dell servers using iPXE boot.
# It performs the following high-level steps:
# 1. Loads secrets from a JSON file for secure credential management
# 2. Verifies Dell server compatibility
# 3. Checks iDRAC connectivity
# 4. Prepares the PXE environment
# 5. Configures servers for PXE boot
# 6. Initiates and monitors the Harvester installation process
# 7. Performs post-installation verifications
# 8. Cleans up temporary files and configurations
#
# Prerequisites:
# - Ansible 2.9 or higher
# - Dell servers with iDRAC access
# - Proper network configuration for PXE booting
# - Harvester ISO and required files accessible
#
# Usage: ansible-playbook -i inventory.ini playbook.yml [-e variable=value]
#
# Important variables:
# - pxe_harvester_version: Version of Harvester to install (default: v1.3.1)
# - idrac_creds: Dictionary containing iDRAC credentials (loaded from external file)
# - cleanup_temp_files: Boolean to determine if temporary files should be cleaned up (default: true)

- name: Install Harvester on Dell Servers via iPXE
  hosts: idrac_hosts
  gather_facts: false # We don't need to gather facts as we're working with iDRAC
  vars:
    # Load secrets from an external JSON file for enhanced security
    # This file should be properly secured and not committed to version control
    secrets: "{{ lookup('file','secrets.json') | from_json }}"

  # Define the roles and collections used in this playbook
  roles:
    - harvester_install # Custom role for Harvester installation tasks
  collections:
    - containers.podman # Used for container management (e.g., for PXE services)
    - dellemc.openmanage # Used for iDRAC interactions
    - community.general # Provides additional Ansible modules

  pre_tasks:
    # Include documentation for all variables used in the playbook
    # This helps in understanding the purpose and expected values of each variable
    - name: Include variable documentation
      ansible.builtin.include_vars:
        file: vars_documentation.yml
      tags:
        - always
        - documentation

    # Verify that we're running on Dell servers
    # This playbook is specifically designed for Dell hardware
    - name: Verify Dell server compatibility
      ansible.builtin.assert:
        that:
          - ansible_facts['system_vendor'] == "Dell Inc."
        msg: "This playbook is designed for Dell servers only"
      tags:
        - always
        - verification

  tasks:
    # Load iDRAC credentials from a separate file for improved security
    # This allows for easier credential management without exposing sensitive information
    - name: Include iDRAC credential variables
      include_vars:
        file: "{{ playbook_dir }}/group_vars/idrac_credentials.yml"
        name: idrac_creds
      tags:
        - always
        - idrac

    # Verify connectivity to iDRAC
    # This ensures that we can communicate with the iDRAC interface before proceeding
    - name: Verify iDRAC connectivity
      dellemc.openmanage.idrac_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: idrac_result
      failed_when: idrac_result.failed
      retries: 3
      delay: 10
      until: not idrac_result.failed
      tags:
        - always
        - idrac
        - verification

    # Prepare the PXE environment for Harvester installation
    # This task sets up DHCP, TFTP, and HTTP servers for PXE booting
    - name: Prepare PXE environment
      include_role:
        name: harvester_install
        tasks_from: prepare_pxe
      tags:
        - pxe
        - setup

    # Configure the Dell servers to boot from PXE
    # This involves setting BIOS options and configuring the boot order
    - name: Configure servers for PXE boot
      include_role:
        name: harvester_install
        tasks_from: configure_pxe_boot
      tags:
        - pxe
        - boot

    # Start the Harvester installation process
    # This initiates the PXE boot and begins the Harvester OS installation
    - name: Initiate Harvester installation
      include_role:
        name: harvester_install
        tasks_from: install_harvester
      tags:
        - install

    # Monitor the progress of the Harvester installation
    # This task checks the installation status and waits for completion
    - name: Monitor installation progress
      include_role:
        name: harvester_install
        tasks_from: monitor_installation
      tags:
        - install
        - monitor

    # Perform verification checks after the installation
    # This ensures that Harvester is properly installed and configured
    - name: Perform post-installation verifications
      include_role:
        name: harvester_install
        tasks_from: post_install_verification
      tags:
        - verification
        - post-install

  post_tasks:
    # Clean up temporary files created during the installation process
    # This helps maintain a clean environment after installation
    - name: Cleanup temporary files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - "{{ role_path }}/files/data/harvester.iso"
        - "{{ role_path }}/files/data/harvester-vmlinuz"
        - "{{ role_path }}/files/data/harvester-initrd"
        - "{{ role_path }}/files/data/harvester-rootfs"
      when: cleanup_temp_files | default(true)
      tags:
        - cleanup

  handlers:
    # Handler to reboot the server if necessary
    # This is triggered when certain configuration changes require a reboot
    - name: Reboot server
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "reboot"
      listen: "reboot_required"

    # Handler to refresh the Ansible inventory
    # This ensures that any changes to the inventory during installation are reflected
    - name: Update inventory
      meta: refresh_inventory
      listen: "update_inventory"

---
./ansible.cfg


# ansible.cfg
#
# This file configures Ansible behavior for this project.
# It sets various options to optimize performance and usability.

[defaults]
# Use the custom inventory file
inventory = inventory.ini

# Set the roles path
roles_path = roles

# Disable host key checking (use with caution in production)
host_key_checking = False

# Set the location of the custom modules
library = ./library

# Enable fact caching to improve performance
fact_caching = jsonfile
fact_caching_connection = /tmp/ansible_fact_cache
fact_caching_timeout = 86400

# Increase the timeout for long-running operations
timeout = 30

# Enable logging
log_path = ./ansible.log

# Use the YAML callback plugin for better CLI output
stdout_callback = yaml

[ssh_connection]
# Use pipelining to improve performance
pipelining = True

# Increase SSH timeout
ssh_args = -o ControlMaster=auto -o ControlPersist=60s -o ConnectTimeout=10

[privilege_escalation]
# Assume 'become' is needed for privileged operations
become = True
become_method = sudo
become_user = root
become_ask_pass = False

---
./group_vars/all.yml


---
# group_vars/all.yml
#
# This file contains variables that apply to all hosts in the inventory.
# It defines global settings for the Harvester installation process.

# ---------------------------------------------------------------------------- #
# PXE and Harvester configuration
# ---------------------------------------------------------------------------- #
# These variables define the Harvester version, network interfaces, and storage devices

# Harvester version to be installed
pxe_harvester_version: "v1.3.1"

# Network interface for Harvester management
pxe_harvester_mgmt_interface: "{{ dell_mgmt_interface | default('eno1') }}"

# Virtual IP for the Harvester cluster
pxe_harvester_vip: "10.0.20.20"

# MAC address associated with the virtual IP
pxe_harvester_vip_mac: "{{ dell_vip_mac | default('00:11:22:33:44:55') }}"

# Disk to be used for Harvester OS installation
pxe_harvester_osdisk: "{{ dell_os_disk | default('/dev/sda') }}"

# Disk to be used for Harvester data storage
pxe_harvester_datadisk: "{{ dell_data_disk | default('/dev/sdb') }}"

# ---------------------------------------------------------------------------- #
# URLs and checksums for Harvester files
# ---------------------------------------------------------------------------- #
# Ensure these are updated to the correct version and checksums before running the playbook

pxe_iso_url: "https://releases.rancher.com/harvester/{{ pxe_harvester_version }}/harvester-{{ pxe_harvester_version }}-amd64.iso"
pxe_iso_checksum: "sha256:CHECKSUM_HERE"
pxe_kernel_url: "https://releases.rancher.com/harvester/{{ pxe_harvester_version }}/harvester-{{ pxe_harvester_version }}-vmlinuz-amd64"
pxe_kernel_checksum: "sha256:CHECKSUM_HERE"
pxe_initrd_url: "https://releases.rancher.com/harvester/{{ pxe_harvester_version }}/harvester-{{ pxe_harvester_version }}-initrd-amd64"
pxe_initrd_checksum: "sha256:CHECKSUM_HERE"
pxe_rootfs_url: "https://releases.rancher.com/harvester/{{ pxe_harvester_version }}/harvester-{{ pxe_harvester_version }}-rootfs-amd64.squashfs"
pxe_rootfs_checksum: "sha256:CHECKSUM_HERE"

# ---------------------------------------------------------------------------- #
# Network configuration
# ---------------------------------------------------------------------------- #
# Adjust these settings to match your network environment

netmask: "255.255.255.0"
gateway: "192.168.1.1"
dns_servers: "8.8.8.8,8.8.4.4"
ntp_servers: "0.suse.pool.ntp.org,1.suse.pool.ntp.org"

# ---------------------------------------------------------------------------- #
# SSH and authentication settings
# ---------------------------------------------------------------------------- #
# Replace with your actual SSH public key and cluster token

ssh_public_key: "ssh-rsa AAAAB... your_public_key"
cluster_token: "your_cluster_token"

# ---------------------------------------------------------------------------- #
# Dell-specific configurations
# ---------------------------------------------------------------------------- #
# These settings optimize Dell servers for Harvester

dell_idrac_version_min: "4.40.00.00"
dell_bios_settings:
  - name: "ProcVirtualization"
    value: "Enabled"
  - name: "SriovGlobalEnable"
    value: "Enabled"
  - name: "SystemProfile"
    value: "PerfOptimized"

# ---------------------------------------------------------------------------- #
# Cleanup and logging configuration
# ---------------------------------------------------------------------------- #
# Adjust these settings based on your preferences and requirements

cleanup_temp_files: true
log_level: "INFO"
log_file: "/var/log/harvester_install.log"

# ---------------------------------------------------------------------------- #
# Performance tuning
# ---------------------------------------------------------------------------- #
# These settings can be adjusted based on your performance needs

dell_power_profile: "MaxPerformance"
dell_fan_speed_offset: "High"

# ---------------------------------------------------------------------------- #
# Security settings
# ---------------------------------------------------------------------------- #
# WARNING: Set idrac_ssl_verify to true in production environments

idrac_ssl_verify: false

# ---------------------------------------------------------------------------- #
# Timeouts and retry counts
# ---------------------------------------------------------------------------- #
# Adjust these values based on your network conditions and server performance

api_check_retries: 60
api_check_delay: 10
installation_timeout: 3600
network_check_timeout: 60

# ---------------------------------------------------------------------------- #
# System requirements
# ---------------------------------------------------------------------------- #
# Minimum requirements for Harvester installation

min_cpu_count: 4
min_memory_gb: 32
min_disk_space_gb: 120

# ---------------------------------------------------------------------------- #
# Monitoring and notification settings
# ---------------------------------------------------------------------------- #
# Configure these for integration with your monitoring systems

monitoring_system_url: "http://monitoring.example.com"
admin_email: "admin@example.com"
slack_webhook_url: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"

---
./README.md


# Harvester Installation Playbook

## Table of Contents

- [Harvester Installation Playbook](#harvester-installation-playbook)
  - [Table of Contents](#table-of-contents)
  - [Introduction](#introduction)
  - [System Requirements](#system-requirements)
    - [Hardware Requirements](#hardware-requirements)
      - [Minimum](#minimum)
      - [Recommended](#recommended)
    - [Supported Dell Server Models](#supported-dell-server-models)
    - [iDRAC Requirements](#idrac-requirements)
  - [Software Prerequisites](#software-prerequisites)
  - [Installation Process Overview](#installation-process-overview)
  - [Playbook Structure](#playbook-structure)
  - [Configuration](#configuration)
    - [Inventory](#inventory)
    - [Variables](#variables)
  - [Usage](#usage)
  - [Customization](#customization)
  - [Troubleshooting](#troubleshooting)

## Introduction

This Ansible playbook automates the installation of Harvester on Dell servers using iPXE boot and iDRAC for management. Harvester is an open-source hyper-converged infrastructure (HCI) software built on Kubernetes.

**Version**: 1.0.0

**Supported Harvester Versions**: v1.1.0 - v1.3.1

**Last Updated**: 2023-06-15

## System Requirements

### Hardware Requirements

#### Minimum

- CPU: 4 cores
- RAM: 32 GB
- Storage: 120 GB SSD for OS, 200 GB SSD for data
- Network: 1 Gbps NIC

#### Recommended

- CPU: 16 cores
- RAM: 128 GB
- Storage: 240 GB NVMe for OS, 1 TB NVMe for data
- Network: 10 Gbps NIC

### Supported Dell Server Models

- PowerEdge R640
- PowerEdge R740
- PowerEdge R750
- PowerEdge R840
- PowerEdge R940

### iDRAC Requirements

- iDRAC version: 4.40.00.00 or higher
- iDRAC Enterprise license

## Software Prerequisites

- Ansible 2.9 or newer
- Python 3.6 or newer
- `dellemc.openmanage` Ansible collection
- `containers.podman` Ansible collection
- `community.general` Ansible collection

## Installation Process Overview

```mermaid
graph TD
    A[Start] --> B[Pre-flight Checks]
    B --> C[Prepare PXE Environment]
    C --> D[Configure Dell iDRAC]
    D --> E[Reboot Servers]
    E --> F[Monitor Installation]
    F --> G{Installation Successful?}
    G -- Yes --> H[Post-install Configuration]
    G -- No --> I[Rollback]
    H --> J[Verify Cluster]
    I --> K[Notify Administrators]
    J --> L[End]
    K --> L
```

## Playbook Structure

```text
harvester-install/
├── ansible.cfg
├── inventory.ini
├── playbook.yml
├── README.md
├── group_vars/
│   └── all.yml
└── roles/
    └── harvester_install/
        ├── tasks/
        │   ├── main.yml
        │   ├── prepare_pxe.yml
        │   ├── configure_pxe_boot.yml
        │   ├── install_harvester.yml
        │   ├── monitor_installation.yml
        │   ├── post_install_verification.yml
        │   ├── cleanup.yml
        │   └── rollback.yml
        ├── handlers/
        │   └── main.yml
        ├── templates/
        │   ├── harvester.ipxe.j2
        │   ├── harvester.yaml.j2
        │   └── dnsmasq.conf.j2
        ├── files/
        │   └── data/
        └── vars/
            └── main.yml
```

## Configuration

### Inventory

Define your Dell servers in the `inventory.ini` file:

```ini
[idrac_hosts]
192.168.1.101 ansible_host=192.168.1.101
192.168.1.102 ansible_host=192.168.1.102
192.168.1.103 ansible_host=192.168.1.103
192.168.1.104 ansible_host=192.168.1.104
```

### Variables

Key variables are defined in `group_vars/all.yml`:

```yaml
pxe_harvester_version: "v1.3.1"
pxe_harvester_mgmt_interface: "eno1"
pxe_harvester_vip: "10.0.20.20"
pxe_harvester_osdisk: "/dev/sda"
pxe_harvester_datadisk: "/dev/sdb"
```

Adjust these variables according to your environment.

## Usage

To run the playbook:

```bash
ansible-playbook -i inventory.ini playbook.yml
```

Additional options:

- Verbose mode: Add `-v`, `-vv`, or `-vvv`
- Limit to specific hosts: Add `--limit hostname1,hostname2`
- Use vault: Add `--ask-vault-pass`
- Pass extra variables: Add `-e "variable_name=value"`
- Check mode (dry run): Add `--check`
- Run specific tags: Add `--tags "tag1,tag2"`

Example with multiple options:

```bash
ansible-playbook -i inventory.ini playbook.yml -v --limit harvester_nodes --ask-vault-pass -e "pxe_harvester_version=v1.3.1" --tags "preparation,installation"
```

## Customization

To customize the installation process:

1. Modify variables in `group_vars/all.yml` for global changes.
2. Create host-specific variable files in `host_vars/` for per-server customization.
3. Add or modify tasks in the role's task files to include additional steps.
4. Update templates in the `templates/` directory to customize configuration files.

## Troubleshooting

Common issues and their solutions:

1. **iDRAC Connectivity Issues**
   - Ensure iDRAC IP is correct in inventory
   - Verify network connectivity
   - Check iDRAC credentials

2. **PXE Boot Failures**
   - Verify DHCP server is configured correctly
   - Ensure iPXE files are accessible
   - Check network switch configuration for PXE/DHCP

3. **Installation Hangs**
   - Increase verbosity for more detailed logs
   - Check server console for error messages
   - Verify hardware meets minimum requirements

4. **Post-Installation Cluster Formation Issues**
   - Verify network connectivity between nodes
   - Check Harvester logs for errors
   - Ensure all nodes have the correct time set

5. **Performance Issues**
   - Verify BIOS settings are optimized
   - Check for resource contention (CPU, memory, disk I/O)
   - Monitor network performance between nodes

For more detailed troubleshooting:

- Check the Ansible log file specified in `ansible.cfg`
- Review iDRAC logs for hardware-related issues
- Examine Harvester logs on the installed nodes

---
./library/idrac_advanced_check.py


#!/usr/bin/python
# -*- coding: utf-8 -*-

"""
Ansible module for performing advanced checks on iDRAC.

This module connects to an iDRAC interface and performs a series of checks
to ensure the system is ready for Harvester installation.
"""

import re
from ansible.module_utils.basic import AnsibleModule
from ansible.module_utils.redfish_utils import RedfishUtils

ANSIBLE_METADATA = {"metadata_version": "1.2", "status": ["preview"], "supported_by": "community"}

DOCUMENTATION = """
---
module: idrac_advanced_check
short_description: Perform advanced checks on iDRAC
description:
    - This module performs advanced checks on iDRAC to ensure it's ready for Harvester installation.
    - It verifies hardware compatibility, firmware versions, system health, and RAID configuration.
options:
    idrac_ip:
        description: iDRAC IP address
        required: true
        type: str
    idrac_user:
        description: iDRAC username
        required: true
        type: str
    idrac_password:
        description: iDRAC password
        required: true
        type: str
    min_firmware_version:
        description: Minimum required iDRAC firmware version
        required: false
        type: str
        default: "4.40.00.00"
    min_cpu_count:
        description: Minimum required CPU count
        required: false
        type: int
        default: 4
    min_memory_gb:
        description: Minimum required memory in GB
        required: false
        type: int
        default: 32
"""

EXAMPLES = """
- name: Perform advanced iDRAC checks
  idrac_advanced_check:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_user }}"
    idrac_password: "{{ idrac_password }}"
    min_firmware_version: "4.50.00.00"
    min_cpu_count: 8
    min_memory_gb: 64
"""

RETURN = """
msg:
    description: Detailed message about the checks performed
    type: str
    returned: always
failed:
    description: Indicates if any checks failed
    type: bool
    returned: always
check_results:
    description: Detailed results of each check
    type: dict
    returned: always
"""


def check_firmware_version(idrac, min_version):
    """
    Check if the iDRAC firmware version is compatible.

    Args:
        idrac (RedfishUtils): The iDRAC connection object.
        min_version (str): Minimum required firmware version.

    Returns:
        tuple: (bool, str) indicating success/failure and a message.
    """
    try:
        firmware_version = idrac.get_firmware_version()
        if re.match(r"^\d+\.\d+\.\d+\.\d+$", firmware_version):
            if firmware_version >= min_version:
                return True, f"Firmware version {firmware_version} is compatible"
            else:
                return False, f"Firmware version {firmware_version} is below the minimum required version {min_version}"
        else:
            return False, f"Invalid firmware version format: {firmware_version}"
    except Exception as e:
        return False, f"Error checking firmware version: {str(e)}"


def check_hardware_compatibility(idrac, min_cpu_count, min_memory_gb):
    """
    Check if the hardware is compatible with Harvester.

    Args:
        idrac (RedfishUtils): The iDRAC connection object.
        min_cpu_count (int): Minimum required CPU count.
        min_memory_gb (int): Minimum required memory in GB.

    Returns:
        tuple: (bool, str) indicating success/failure and a message.
    """
    try:
        system_info = idrac.get_system_info()

        cpu_count = system_info.get("ProcessorSummary", {}).get("Count", 0)
        memory_gb = system_info.get("MemorySummary", {}).get("TotalSystemMemoryGiB", 0)

        if cpu_count < min_cpu_count or memory_gb < min_memory_gb:
            return False, f"Hardware does not meet minimum requirements. CPUs: {cpu_count}/{min_cpu_count}, RAM: {memory_gb}/{min_memory_gb}GB"

        return True, f"Hardware meets minimum requirements. CPUs: {cpu_count}, RAM: {memory_gb}GB"
    except Exception as e:
        return False, f"Error checking hardware compatibility: {str(e)}"


def check_system_health(idrac):
    """
    Check overall system health.

    Args:
        idrac (RedfishUtils): The iDRAC connection object.

    Returns:
        tuple: (bool, str) indicating success/failure and a message.
    """
    try:
        health_info = idrac.get_system_health()

        if health_info.get("Status", {}).get("Health") == "OK":
            return True, "System health is good"
        else:
            return False, f"System health is not OK: {health_info.get('Status', {}).get('Health')}"
    except Exception as e:
        return False, f"Error checking system health: {str(e)}"


def check_raid_configuration(idrac):
    """
    Check RAID configuration.

    Args:
        idrac (RedfishUtils): The iDRAC connection object.

    Returns:
        tuple: (bool, str) indicating success/failure and a message.
    """
    try:
        raid_info = idrac.get_raid_controller_info()

        if not raid_info:
            return False, "No RAID controllers found"

        for controller in raid_info:
            if controller.get("Status", {}).get("Health") != "OK":
                return False, f"RAID controller {controller.get('Id')} health is not OK"

        return True, "RAID configuration is healthy"
    except Exception as e:
        return False, f"Error checking RAID configuration: {str(e)}"


def run_module():
    """
    Main function to run the Ansible module.
    """
    module_args = dict(
        idrac_ip=dict(required=True, type="str"),
        idrac_user=dict(required=True, type="str"),
        idrac_password=dict(required=True, type="str", no_log=True),
        min_firmware_version=dict(required=False, type="str", default="4.40.00.00"),
        min_cpu_count=dict(required=False, type="int", default=4),
        min_memory_gb=dict(required=False, type="int", default=32),
    )

    module = AnsibleModule(argument_spec=module_args, supports_check_mode=True)

    try:
        # Initialize iDRAC connection
        idrac = RedfishUtils(creds=dict(ip=module.params["idrac_ip"], username=module.params["idrac_user"], password=module.params["idrac_password"]), root_uri="/redfish/v1", timeout=30)

        # Perform advanced checks
        checks = [(check_firmware_version, [module.params["min_firmware_version"]]), (check_hardware_compatibility, [module.params["min_cpu_count"], module.params["min_memory_gb"]]), (check_system_health, []), (check_raid_configuration, [])]

        failed_checks = []
        check_results = {}
        for check, args in checks:
            success, message = check(idrac, *args)
            check_name = check.__name__
            check_results[check_name] = {"success": success, "message": message}
            if not success:
                failed_checks.append(message)

        # Prepare result
        result = dict(changed=False, msg="Advanced iDRAC checks completed", failed=bool(failed_checks), check_results=check_results)

        if failed_checks:
            result["msg"] = f"Advanced iDRAC checks failed: {', '.join(failed_checks)}"
        else:
            result["msg"] = "All advanced iDRAC checks passed successfully"

        module.exit_json(**result)

    except Exception as e:
        module.fail_json(msg=f"An error occurred during iDRAC checks: {str(e)}")


if __name__ == "__main__":
    run_module()

---
./vars_documentation.yml


# ./harvester-install/vars_documentation.yml
---
# This file documents all variables used in the Harvester installation playbook

- name: Include variable documentation
  ansible.builtin.include_vars:
    file: vars_documentation.yml
  tags:
    - always
    - documentation

# PXE and Harvester configuration
pxe_harvester_version:
  description: "Version of Harvester to be installed"
  type: string
  example: "v1.3.1"

pxe_harvester_mgmt_interface:
  description: "Network interface for Harvester management"
  type: string
  example: "eno2"

pxe_harvester_vip:
  description: "Virtual IP for the Harvester cluster"
  type: string
  example: "10.0.20.20"

pxe_harvester_vip_mac:
  description: "MAC address associated with the virtual IP"
  type: string
  example: "da:50:09:ec:51:83"

pxe_harvester_osdisk:
  description: "Disk to be used for Harvester OS installation"
  type: string
  example: "/dev/disk/by-id/ata-KINGSTON_SA400S37240G_50026B7783F66D6B"

pxe_harvester_datadisk:
  description: "Disk to be used for Harvester data storage"
  type: string
  example: "/dev/disk/by-id/nvme-KINGSTON_SNV2S1000G_50026B77859C17C2"

# Network configuration
netmask:
  description: "Network mask for the Harvester network"
  type: string
  example: "255.255.255.0"

gateway:
  description: "Gateway IP address for the Harvester network"
  type: string
  example: "192.168.1.1"

dns_servers:
  description: "Comma-separated list of DNS servers"
  type: string
  example: "8.8.8.8,8.8.4.4"

ntp_servers:
  description: "Comma-separated list of NTP servers"
  type: string
  example: "0.suse.pool.ntp.org,1.suse.pool.ntp.org"

# SSH and authentication
ssh_public_key:
  description: "SSH public key for Harvester nodes"
  type: string
  example: "ssh-rsa AAAAB... your_public_key"

cluster_token:
  description: "Token for Harvester cluster authentication"
  type: string
  example: "your_cluster_token"

# Timeouts and retry counts
api_check_retries:
  description: "Number of retries for API availability check"
  type: integer
  example: 60

api_check_delay:
  description: "Delay between API availability check retries (in seconds)"
  type: integer
  example: 10

installation_timeout:
  description: "Timeout for the entire installation process (in seconds)"
  type: integer
  example: 3600

network_check_timeout:
  description: "Timeout for network connectivity checks (in seconds)"
  type: integer
  example: 60

# System requirements
min_disk_space:
  description: "Minimum required disk space in MB"
  type: integer
  example: 100000

min_network_bandwidth:
  description: "Minimum required network bandwidth in Mbps"
  type: integer
  example: 1000

max_network_latency:
  description: "Maximum acceptable network latency in ms"
  type: integer
  example: 20

---
./secrets.json


{
    "idrac_credentials": {
        "username": "your_idrac_username",
        "password": "your_idrac_password"
    },
    "harvester": {
        "cluster_token": "your_secure_cluster_token"
    },
    "network": {
        "vip": "10.0.0.100",
        "netmask": "255.255.255.0",
        "gateway": "10.0.0.1",
        "dns_servers": [
            "8.8.8.8",
            "8.8.4.4"
        ]
    },
    "ssh": {
        "public_key": "ssh-rsa AAAAB3NzaC1yc2E... your_public_key"
    },
    "monitoring": {
        "slack_webhook": "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK",
        "email_alerts": "admin@example.com"
    },
    "storage": {
        "nfs_server": "10.0.0.50",
        "nfs_path": "/exports/harvester"
    },
    "api": {
        "rancher_token": "your_rancher_api_token"
    }
}
---
./requirements.txt


ansible-core>=2.17.2,<3.0.0
omsdk
redfish
---
./roles/harvester_install/templates/harvester-config.yaml.j2


# Harvester Configuration Template
# This template generates the Harvester configuration file for each node.
# It uses variables defined in group_vars/all.yml and host-specific variables.

scheme_version: 1
server_url: {{ hostvars[groups['idrac_hosts'][0]]['ansible_host'] }}
token: {{ cluster_token }}
os:
  hostname: harvester-{{ inventory_hostname | regex_replace('\\.', '-') }}
  ssh_authorized_keys:
    - {{ ssh_public_key }}
  password: "{{ harvester_password }}"
  ntp_servers:
{% for server in ntp_servers.split(',') %}
    - {{ server }}
{% endfor %}
network:
  interfaces:
    - name: {{ harvester_network_interface | default('ens192') }}
      ip: {{ inventory_hostname }}/{{ netmask }}
      gateway: {{ gateway }}
  dns_nameservers:
{% for server in dns_servers.split(',') %}
    - {{ server }}
{% endfor %}
cluster:
  token: "{{ cluster_token }}"
  server_url: {{ cluster_vip }}
  mode: {{ 'create' if inventory_hostname == groups['idrac_hosts'][0] else 'join' }}
storage:
  os_disk: {{ pxe_harvester_osdisk | default('/dev/sda') }}
  data_disk: {{ pxe_harvester_datadisk | default('/dev/sdb') }}
---
./roles/harvester_install/tasks/main.yml


---
# Harvester Installation on Dell Servers via iPXE
#
# This playbook orchestrates the installation of Harvester on Dell servers using iPXE boot and iDRAC for management.
# It covers the entire process from initial checks to post-installation verification and cleanup.
#
# Major steps include:
#   - Pre-flight checks
#   - iDRAC and server configuration
#   - PXE environment preparation
#   - Pre-installation server configuration
#   - Harvester installation and monitoring
#   - Post-installation verification
#   - Cleanup and finalization
#
# Prerequisites:
#   - Ansible 2.9 or newer
#   - dellemc.openmanage collection installed
#   - iDRAC credentials configured in inventory or group_vars
#   - Harvester ISO available at a specified path
#   - Network configuration for PXE and Harvester cluster defined
#
# Usage:
#   ansible-playbook -i inventory main.yml [-e variable=value]
#
# Version: 1.1

# Pre-flight checks
# These checks ensure that all necessary prerequisites are met before proceeding with the installation.
# Failing these checks will halt the playbook execution to prevent partial or failed installations.
- name: Perform pre-flight checks
  block:
    # Verify that the installed Ansible version meets the minimum requirement
    - name: Verify Ansible version
      assert:
        that: "ansible_version.full is version_compare('2.9', '>=')"
        msg: "This playbook requires Ansible 2.9 or newer. Please upgrade your Ansible installation."

    # Check that all required variables are defined in the inventory or group_vars
    - name: Check for required variables
      assert:
        that:
          - idrac_creds is defined
          - harvester_iso_path is defined
          - cluster_vip is defined
        msg: >
          Missing required variables. Please ensure the following are defined:
          - idrac_creds (iDRAC credentials)
          - harvester_iso_path (path to Harvester ISO)
          - cluster_vip (Virtual IP for the Harvester cluster)

    # Verify iDRAC connectivity to ensure we can manage the servers
    - name: Verify iDRAC connectivity
      dellemc.openmanage.idrac_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: idrac_check
      failed_when: idrac_check.failed
  rescue:
    # Log detailed information if pre-flight checks fail
    - name: Log pre-flight check failure
      debug:
        msg: >
          Pre-flight checks failed. Please address the following issues before proceeding:
          1. Ensure Ansible 2.9 or newer is installed
          2. Verify all required variables are defined in your inventory or group_vars
          3. Check iDRAC connectivity and credentials
      failed_when: true

# iDRAC and Server Configuration
# This step configures iDRAC settings, RAID, and other server-specific configurations
# It's crucial for ensuring the servers are in the correct state before proceeding with the installation
- name: Configure iDRAC and server settings
  import_tasks: idrac_configuration.yml
  tags:
    - idrac
    - configuration

# PXE Environment Preparation
# This step sets up the necessary infrastructure for PXE booting the servers.
# It includes configuring DHCP, TFTP, and HTTP servers.
- name: Prepare PXE environment
  import_tasks: prepare_pxe.yml
  run_once: true
  tags:
    - pxe
    - setup

# Pre-installation Server Checks and Configuration
# These checks ensure that each server meets the hardware and network requirements for Harvester.
# It may include checks for minimum CPU, RAM, disk space, and network configuration.
- name: Run pre-installation checks and configuration
  import_tasks: pre_installation_tasks.yml
  tags:
    - pre-install
    - checks

# Server Configuration Backup
# This step creates a backup of critical server configurations to allow for rollback if needed.
# It's crucial for recovering the system state in case of installation failure.
- name: Backup current server configuration
  block:
    # Backup current BIOS settings
    - name: Backup BIOS settings
      dellemc.openmanage.idrac_bios:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        command: GetAttributes
      register: original_bios_settings

    # Backup current network configuration
    - name: Backup network configuration
      dellemc.openmanage.idrac_network:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        command: GetNetworkSettings
      register: original_network_config

    # Save the backup configurations for potential rollback
    - name: Save backup configurations
      set_fact:
        server_backup:
          bios: "{{ original_bios_settings }}"
          network: "{{ original_network_config }}"
  rescue:
    # Log if backup fails, but allow the playbook to continue
    - name: Log backup failure
      debug:
        msg: >
          Failed to backup server configuration. The installation will proceed, but rollback capabilities may be limited.
          It is recommended to manually backup server configurations before proceeding.
  tags:
    - backup
    - pre-install

# Configure Dell iDRAC for PXE Boot
# This step configures the server's BIOS to enable PXE booting.
# It's critical for ensuring the servers will boot from the network for Harvester installation.
- name: Configure PXE boot settings
  block:
    # Set the persistent boot device to PXE
    - name: Set persistent boot device to PXE
      dellemc.openmanage.idrac_bios:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        attributes:
          BootMode: "Bios"
          BootSeqRetry: "Enabled"
          FirstBootDevice: "PXE"
      register: bios_result
      retries: 3
      delay: 30
      until: bios_result is success

    # Configure one-time PXE boot
    # This ensures that the server will attempt PXE boot on the next restart, even if the persistent setting fails.
    - name: Set one-time boot device to PXE
      dellemc.openmanage.idrac_boot:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        boot_device: "PXE"
        boot_mode: "OneTime"
      register: boot_result
      retries: 3
      delay: 30
      until: boot_result is success
  tags:
    - pxe
    - boot

# Manage System Power State
# This step ensures the server is powered on and ready for PXE boot.
- name: Manage system power
  block:
    # Check the current power state of the system
    - name: Get system power state
      dellemc.openmanage.idrac_power_state_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: power_state

    # Restart the system if it's already powered on
    - name: Restart system power if on
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "reboot"
      when: power_state.power_state == "On"

    # Power on the system if it's currently off
    - name: Turn system power on if off
      dellemc.openmanage.idrac_power:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "on"
      when: power_state.power_state == "Off"
  rescue:
    # Log any failures in power management
    - name: Log power management failure
      debug:
        msg: >
          Failed to manage system power. This could be due to iDRAC connectivity issues or insufficient permissions.
          Manual intervention may be required to ensure the server is powered on and ready for PXE boot.
      failed_when: true
  tags:
    - power
    - pre-install

# Monitor Harvester Installation Progress
# This step monitors the progress of the Harvester installation.
- name: Monitor Harvester installation
  block:
    # Set a flag to indicate that installation has started
    - name: Set installation started flag
      set_fact:
        installation_started: true

    # Wait for the Harvester installation to complete
    # This checks if SSH (port 22) becomes available, indicating a successful OS boot
    - name: Wait for Harvester installation to complete
      wait_for:
        host: "{{ inventory_hostname }}"
        port: 22
        state: started
        delay: 300 # Wait 5 minutes before starting to check
        timeout: 3600 # Total timeout of 1 hour
      register: installation_wait_result

    # Check installation progress via iDRAC if SSH wait fails
    - name: Check installation progress via iDRAC
      dellemc.openmanage.idrac_lifecycle_controller_job_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: lc_job_info
      when: installation_wait_result.failed

    # Evaluate the overall installation status
    - name: Evaluate installation status
      set_fact:
        installation_completed: "{{ not installation_wait_result.failed and (lc_job_info.jobs | default([]) | selectattr('job_status', 'equalto', 'Failed') | list | length == 0) }}"
  rescue:
    # Log any failures in monitoring the installation
    - name: Log installation monitoring failure
      debug:
        msg: >
          Failed to monitor installation progress. This could be due to network issues, iDRAC problems, or an unexpected error during installation.
          Manual verification of the installation status is required.
      failed_when: true
  tags:
    - install
    - monitor

# Post-installation Tasks
# These tasks verify the installation and perform any necessary post-install configurations.
- name: Perform post-installation tasks
  block:
    # Run post-installation verification tasks
    - name: Run post-installation verifications
      import_tasks: post_installation_tasks.yml
      when: installation_completed | default(false)

    # Verify that essential Harvester services are running
    - name: Verify Harvester services
      ansible.builtin.command: kubectl get pods -n harvester-system
      register: harvester_pods
      changed_when: false
      failed_when: "'Running' not in harvester_pods.stdout"
      delegate_to: localhost
      run_once: true
      when: installation_completed | default(false)

    # Perform any necessary cleanup tasks
    - name: Perform cleanup tasks
      import_tasks: cleanup_tasks.yml

    # Log successful installation
    - name: Log successful installation
      debug:
        msg: "Harvester installation completed successfully on {{ inventory_hostname }}"
      changed_when: true
      notify: Log Installation Success
      when: installation_completed | default(false)
  rescue:
    # Log any failures in post-installation tasks
    - name: Log post-installation task failure
      debug:
        msg: >
          Post-installation tasks failed. The Harvester software may be installed, but the system might not be fully operational.
          Manual verification and potential troubleshooting are required.
      failed_when: true
  tags:
    - post-install
    - verification

# Handle Installation Failure
# This step implements rollback procedures and notifies administrators in case of installation failure.
- name: Handle installation failure
  block:
    # Attempt to rollback changes if installation failed
    - name: Implement rollback on failure
      import_tasks: rollback_tasks.yml
      when: not installation_completed | default(true)

    # Notify administrators of the installation failure
    - name: Notify administrators of failure
      mail:
        to: "{{ admin_email }}"
        subject: "Harvester installation failed on {{ inventory_hostname }}"
        body: >
          The Harvester installation on {{ inventory_hostname }} has failed.
          Rollback has been attempted. Please check the system and logs for more information.
          Timestamp: {{ ansible_date_time.iso8601 }}
      delegate_to: localhost
      when: not installation_completed | default(true)
  always:
    # Update the Ansible inventory with the installation status
    - name: Update inventory status
      add_host:
        name: "{{ inventory_hostname }}"
        groups: "{{ 'harvester_installed' if installation_completed | default(false) else 'installation_failed' }}"
  tags:
    - error-handling
    - notification

# Final Cluster Verification (for multi-node setups)
# This step verifies that the Harvester cluster is fully operational.
- name: Verify Harvester cluster
  block:
    # Check the status of all nodes in the cluster
    - name: Check cluster status
      ansible.builtin.command: kubectl get nodes
      register: cluster_status
      changed_when: false
      failed_when: cluster_status.rc != 0 or cluster_status.stdout_lines | length != groups['idrac_hosts'] | length
      delegate_to: localhost
      run_once: true

    # Verify cluster functionality by creating a test deployment
    - name: Verify cluster functionality
      ansible.builtin.command: kubectl create deployment test-nginx --image=nginx
      register: test_deployment
      changed_when: false
      failed_when: test_deployment.rc != 0
      delegate_to: localhost
      run_once: true

    # Clean up the test deployment
    - name: Remove test deployment
      ansible.builtin.command: kubectl delete deployment test-nginx
      changed_when: false
      delegate_to: localhost
      run_once: true
  rescue:
    # Log any failures in cluster verification
    - name: Log cluster verification failure
      debug:
        msg: >
          Cluster verification failed. The Harvester cluster may not be fully operational.
          Please check the kubectl outputs and cluster logs for more information.
      failed_when: true
  always:
    # Generate a detailed installation report
    - name: Generate installation report
      template:
        src: installation_report.j2
        dest: "/var/log/harvester_installation_{{ ansible_date_time.iso8601 }}.log"
      delegate_to: localhost
  tags:
    - cluster
    - verification

  # Handlers
  # These handlers can be called by tasks to perform actions after certain conditions are met
  handlers:
    # Log when the installation is successful
    - name: Log Installation Success
      debug:
        msg: "Harvester installation successful on {{ inventory_hostname }} at {{ ansible_date_time.iso8601 }}"
      listen: "log_installation_success"

---
./roles/harvester_install/tasks/post_tasks.yml


---
# Wait for the Harvester API to become available
# This ensures that the Harvester cluster is up and running before proceeding
- name: Wait for Harvester API to be available
  uri:
    url: "https://{{ cluster_vip }}/v1-harvester/version"
    validate_certs: no # Disable SSL certificate validation
  register: result
  until: result.status == 200 # Keep trying until we get a successful HTTP response
  retries: 60 # Retry up to 60 times
  delay: 10 # Wait 10 seconds between retries

# Check the overall health of the Harvester cluster
# This verifies that the cluster is in a healthy state
- name: Verify Harvester cluster health
  uri:
    url: "https://{{ cluster_vip }}/v1-harvester/healthz"
    validate_certs: no
  register: health_check
  failed_when: health_check.json.status != "OK" # Fail if the cluster health is not "OK"

# Retrieve the list of nodes in the Harvester cluster
# This information will be used to verify that all expected nodes are present
- name: Get Harvester node list
  uri:
    url: "https://{{ cluster_vip }}/v1/harvester/nodes"
    validate_certs: no
  register: node_list

# Ensure that all expected nodes are present in the cluster
# This compares the number of nodes in the cluster to the number of hosts in our inventory
- name: Verify all nodes are present
  assert:
    that:
      - node_list.json | length == groups['idrac_hosts'] | length
    fail_msg: "Not all nodes are present in the Harvester cluster"
    success_msg: "All nodes are present in the Harvester cluster"

# Check the status of each individual node in the cluster
# This ensures that each node is in a 'Ready' state
- name: Check each node's status
  uri:
    url: "https://{{ cluster_vip }}/v1/harvester/nodes/{{ item }}"
    validate_certs: no
  register: node_status
  failed_when: node_status.json.status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | first != 'True'
  loop: "{{ groups['idrac_hosts'] }}" # Perform this check for each host in our inventory

# Verify the status of Longhorn, the storage system used by Harvester
# This ensures that the storage system is properly set up and functioning
- name: Verify Longhorn status
  uri:
    url: "https://{{ cluster_vip }}/v1/harvester/longhornvolumes"
    validate_certs: no
  register: longhorn_status
  failed_when: longhorn_status.json | selectattr('status.state', 'equalto', 'attached') | list | length == 0
  # Fail if there are no volumes in the 'attached' state, indicating potential storage issues

# Add more detailed checks for Longhorn volumes
- name: Get Longhorn volume details
  uri:
    url: "https://{{ cluster_vip }}/v1/longhorn/volumes"
    validate_certs: no
  register: longhorn_volumes

- name: Verify Longhorn volume health
  assert:
    that:
      - longhorn_volumes.json | selectattr('state', 'equalto', 'attached') | list | length > 0
      - longhorn_volumes.json | selectattr('robustness', 'equalto', 'healthy') | list | length == longhorn_volumes.json | length
    fail_msg: "One or more Longhorn volumes are not healthy or attached"
    success_msg: "All Longhorn volumes are healthy and attached"

# Add a task to check cluster nodes' roles
- name: Check cluster nodes' roles
  uri:
    url: "https://{{ cluster_vip }}/v1/harvester/management.cattle.io.clusters"
    validate_certs: no
  register: cluster_info

- name: Verify cluster roles
  assert:
    that:
      - cluster_info.json.data[0].status.conditions | selectattr('type', 'equalto', 'Ready') | map(attribute='status') | first == 'True'
      - cluster_info.json.data[0].status.apiEndpoints | length > 0
    fail_msg: "Cluster is not in a ready state or missing API endpoints"
    success_msg: "Cluster is ready and has API endpoints configured"

# Verify Harvester services are running
- name: Check Harvester services
  ansible.builtin.command: "kubectl get pods -n harvester-system --field-selector status.phase=Running"
  register: harvester_pods
  delegate_to: localhost
  run_once: true
  changed_when: false
  failed_when: harvester_pods.rc != 0 or harvester_pods.stdout_lines | length < 5 # Adjust the number based on expected pods

# Verify cluster formation (for multi-node setups)
- name: Check cluster nodes
  ansible.builtin.command: "kubectl get nodes"
  register: cluster_nodes
  delegate_to: localhost
  run_once: true
  changed_when: false
  failed_when: cluster_nodes.rc != 0 or cluster_nodes.stdout_lines | length < groups['idrac_hosts'] | length

- name: Generate installation report
  template:
    src: installation_report.j2
    dest: "/var/log/harvester_installation_report_{{ inventory_hostname }}.txt"
  delegate_to: localhost

---
./roles/harvester_install/tasks/idrac_configuration.yml


---
# roles/harvester_install/tasks/idrac_configuration.yml

# Change iDRAC password
- name: Change iDRAC password
  dellemc.openmanage.idrac_user:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    new_user_name: "{{ idrac_credentials.username }}"
    new_password: "{{ idrac_new_password }}"
    user_id: 2 # Typically, user ID 2 is the root/admin user
  when: idrac_change_password | default(false)
  tags:
    - idrac
    - security

# Configure RAID
- name: Configure RAID
  dellemc.openmanage.idrac_storage_volume:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    state: "present"
    controller_id: "RAID.Integrated.1-1" # Adjust this to match your hardware
    volumes:
      - name: "RAID1_OS"
        raid_type: "RAID1"
        span_depth: 1
        span_length: 2
        number_dedicated_hot_spare: 0
        disk_cache_policy: "Default"
        write_cache_policy: "WriteBackForce"
        read_cache_policy: "ReadAhead"
        stripe_size: 128
        capacity: 558.375
        drives:
          - Disk.Bay.0:Enclosure.Internal.0-1:RAID.Integrated.1-1
          - Disk.Bay.1:Enclosure.Internal.0-1:RAID.Integrated.1-1
  when: configure_raid | default(false)
  tags:
    - idrac
    - raid

# Set iDRAC network settings
- name: Configure iDRAC network
  dellemc.openmanage.idrac_network:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    setup_idrac:
      enable_nic: true
      nic_selection: "Dedicated"
      auto_negotiate: true
      ip_address: "{{ idrac_new_ip | default(inventory_hostname) }}"
      enable_dhcp: false
      netmask: "{{ idrac_netmask | default('255.255.255.0') }}"
      gateway: "{{ idrac_gateway }}"
  when: configure_idrac_network | default(false)
  tags:
    - idrac
    - network

# Configure iDRAC users
- name: Configure iDRAC users
  dellemc.openmanage.idrac_user:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    state: "present"
    user_name: "{{ item.username }}"
    user_password: "{{ item.password }}"
    privilege: "{{ item.privilege }}"
  loop: "{{ idrac_users | default([]) }}"
  when: configure_idrac_users | default(false)
  tags:
    - idrac
    - users

# Configure BIOS settings
- name: Configure BIOS settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    attributes: "{{ dell_bios_settings | items2dict(key_name='name', value_name='value') }}"
  tags:
    - idrac
    - bios

# Reboot server if any changes were made
- name: Reboot server if changes were made
  dellemc.openmanage.idrac_power:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_credentials.username }}"
    idrac_password: "{{ idrac_credentials.password }}"
    state: "reboot"
  when: configure_raid|default(false) or configure_idrac_network|default(false) or configure_idrac_users|default(false)
  tags:
    - idrac
    - reboot

---
./roles/harvester_install/tasks/cleanup.yml


---
# Cleanup tasks for Harvester installation

- name: Remove temporary installation files
  ansible.builtin.file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ role_path }}/files/data/harvester.iso"
    - "{{ role_path }}/files/data/harvester-vmlinuz"
    - "{{ role_path }}/files/data/harvester-initrd"
    - "{{ role_path }}/files/data/harvester-rootfs"
  when: cleanup_temp_files | default(true)

- name: Stop and remove PXE boot containers
  containers.podman.podman_container:
    name: "{{ item }}"
    state: absent
  loop:
    - "dnsmasq"
    - "nginx"
  when: cleanup_containers | default(true)

- name: Remove iPXE files
  ansible.builtin.file:
    path: "{{ role_path }}/files/data/ipxe"
    state: absent
  when: cleanup_ipxe | default(true)

- name: Reset iDRAC to default network boot settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes:
      BootMode: "Bios"
      BootSeqRetry: "Disabled"
      FirstBootDevice: "HardDisk"
  when: reset_idrac_boot | default(true)

- name: Log cleanup completion
  ansible.builtin.debug:
    msg: "Cleanup completed for Harvester installation on {{ inventory_hostname }}"
# Note: Add any additional cleanup tasks specific to your environment
# For example, you might need to clean up network configurations,
# remove temporary user accounts, etc.

---
./roles/harvester_install/tasks/error_handling.yml


---
# Error handling and rollback procedures

- name: Log error details
  ansible.builtin.debug:
    msg: "Installation failed on {{ inventory_hostname }}. Error: {{ error_message }}"

- name: Capture iDRAC logs
  dellemc.openmanage.idrac_logs:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    log_type: sel
    share_name: "/var/log/idrac_logs"
    share_user: "{{ log_share_user }}"
    share_password: "{{ log_share_password }}"
  when: installation_failed | default(false)

- name: Reset iDRAC to default boot settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes:
      BootMode: "Bios"
      BootSeqRetry: "Disabled"
      FirstBootDevice: "HardDisk"

- name: Power off server
  dellemc.openmanage.idrac_power:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    state: "off"

- name: Notify administrators
  ansible.builtin.mail:
    to: "admin@example.com"
    subject: "Harvester installation failed on {{ inventory_hostname }}"
    body: "The Harvester installation process failed. Check the logs and iDRAC console for more information."
  delegate_to: localhost

---
./roles/harvester_install/tasks/pre_tasks.yml


---
# Pre-installation tasks for Harvester on Dell servers

# Verify that the Harvester ISO file exists on the local machine
- name: Verify Harvester ISO exists
  ansible.builtin.stat:
    path: "{{ harvester_iso_path }}"
  register: iso_file
  delegate_to: localhost

- name: Fail if Harvester ISO doesn't exist
  ansible.builtin.fail:
    msg: "Harvester ISO not found at {{ harvester_iso_path }}"
  when: not iso_file.stat.exists

# Check iDRAC firmware version
- name: Check iDRAC firmware version
  dellemc.openmanage.idrac_firmware:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
  register: idrac_firmware

- name: Verify iDRAC firmware version
  ansible.builtin.assert:
    that:
      - idrac_firmware.firmware_version is version(dell_idrac_version_min, '>=')
    fail_msg: "iDRAC firmware version is below the minimum required version {{ dell_idrac_version_min }}"

# Check Dell BIOS settings
- name: Check Dell BIOS settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes: "{{ dell_bios_settings | items2dict(key_name='name', value_name='value') }}"
  register: bios_check

- name: Apply required BIOS settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes: "{{ dell_bios_settings | items2dict(key_name='name', value_name='value') }}"
  when: bios_check.changed

# Check available disk space
- name: Check available disk space
  dellemc.openmanage.idrac_storage_volume:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    state: "view"
  register: storage_info

- name: Verify minimum disk space
  ansible.builtin.assert:
    that:
      - storage_info.storage_volume | sum(attribute='size_mb') > 100000
    fail_msg: "Insufficient disk space for Harvester installation"
    success_msg: "Sufficient disk space available for Harvester installation"

# Check network connectivity
- name: Check network connectivity
  ansible.builtin.wait_for:
    host: "{{ inventory_hostname }}"
    port: 22
    timeout: 60
  ignore_errors: true
  register: network_check

- name: Verify network connectivity
  ansible.builtin.assert:
    that:
      - network_check is success
    fail_msg: "Unable to reach {{ inventory_hostname }} on port 22"
    success_msg: "Network connectivity to {{ inventory_hostname }} verified"

- name: Check network bandwidth
  shell: |
    iperf3 -c {{ hostvars[groups['idrac_hosts'][0]]['ansible_host'] }} -t 5 | grep receiver | awk '{print $7}'
  register: bandwidth_check
  changed_when: false
  failed_when: bandwidth_check.stdout | float < min_network_bandwidth | float

# Set Dell power profile for optimal performance
- name: Set Dell power profile
  dellemc.openmanage.idrac_server_config_profile:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes:
      SystemProfile: "{{ dell_power_profile }}"

# Log pre-installation checks completion
- name: Log pre-installation checks
  ansible.builtin.debug:
    msg: "Pre-installation checks completed successfully for {{ inventory_hostname }}"
  changed_when: true
  notify: Log Pre-Installation Checks

---
./roles/harvester_install/tasks/prepare_pxe.yml


# ./harvester-install/roles/harvester_install/tasks/prepare_pxe.yml
---
# Prepare PXE Environment for Harvester Installation
#
# This playbook prepares the PXE environment necessary for booting and installing
# Harvester on Dell servers. It performs the following major steps:
#   1. Download Harvester installation files
#   2. Prepare iPXE boot environment
#   3. Generate configuration files
#   4. Set up DHCP and TFTP servers using containers
#
# Prerequisites:
#   - Ansible 2.9 or newer
#   - containers.podman collection installed
#   - Sufficient disk space for Harvester ISO and other files
#   - Network access to download Harvester files
#   - Permissions to run containers and configure network services
#
# Variables:
#   - pxe_harvester_version: Version of Harvester to install
#   - pxe_iso_url: URL to download Harvester ISO
#   - pxe_kernel_url: URL to download Harvester kernel
#   - pxe_initrd_url: URL to download Harvester initrd
#   - pxe_rootfs_url: URL to download Harvester rootfs
#   - role_path: Path to the current Ansible role
#
# Usage:
#   This playbook is typically called from the main installation playbook
#   and should not be run independently unless testing the PXE environment setup.

# Ensure all required variables are defined before proceeding with PXE preparation
# This step prevents errors later in the playbook due to missing configuration
- name: "Check mandatory variables are defined"
  ansible.builtin.assert:
    that:
      - pxe_harvester_version is defined # Harvester version to be installed
      - pxe_harvester_mgmt_interface is defined # Network interface for Harvester management
      - pxe_harvester_vip is defined # Virtual IP for the Harvester cluster
      - pxe_harvester_vip_mac is defined # MAC address associated with the virtual IP
      - pxe_harvester_osdisk is defined # Disk to be used for Harvester OS installation
      - pxe_harvester_datadisk is defined # Disk to be used for Harvester data storage

# Download the Harvester ISO file
# This ISO contains the full Harvester installation image
- name: Download Harvester ISO
  ansible.builtin.get_url:
    url: "{{ pxe_iso_url }}" # URL of the Harvester ISO
    dest: "{{ role_path }}/files/data/harvester.iso" # Local destination for the ISO
    checksum: "{{ pxe_iso_checksum }}" # Verify the integrity of the downloaded file
    mode: "0644" # Set appropriate file permissions
  register: harvester_iso # Register the result for potential later use

# Download the Harvester kernel
# This is the Linux kernel that will be loaded during PXE boot
- name: Download Harvester kernel
  ansible.builtin.get_url:
    url: "{{ pxe_kernel_url }}"
    dest: "{{ role_path }}/files/data/harvester-vmlinuz"
    checksum: "{{ pxe_kernel_checksum }}"
    mode: "0644"
  register: harvester_kernel

# Download the Harvester initrd (initial ramdisk)
# This contains the initial root filesystem and drivers needed to boot Harvester
- name: Download Harvester initrd
  ansible.builtin.get_url:
    url: "{{ pxe_initrd_url }}"
    dest: "{{ role_path }}/files/data/harvester-initrd"
    checksum: "{{ pxe_initrd_checksum }}"
    mode: "0644"
  register: harvester_initrd

# Download the Harvester rootfs (root filesystem)
# This contains the main Harvester operating system files
- name: Download Harvester rootfs
  ansible.builtin.get_url:
    url: "{{ pxe_rootfs_url }}"
    dest: "{{ role_path }}/files/data/harvester-rootfs"
    checksum: "{{ pxe_rootfs_checksum }}"
    mode: "0644"
  register: harvester_rootfs

# Clone the iPXE repository
# iPXE is an open-source network boot firmware
# We'll use it to create a custom boot image for Harvester installation
- name: Clone iPXE
  ansible.builtin.git:
    repo: "https://github.com/ipxe/ipxe.git"
    dest: "{{ role_path }}/files/data/ipxe"
    single_branch: true # Only clone the master branch to save time and space
    version: master

# Generate a custom iPXE script for Harvester
# This script will tell iPXE how to boot and install Harvester
- name: Generate Harvester iPXE script
  ansible.builtin.template:
    src: harvester.ipxe.j2 # Jinja2 template for the iPXE script
    dest: "{{ role_path }}/files/data/ipxe/src/harvester.ipxe"
    mode: "0644"

# Build the iPXE boot image
# This creates a custom iPXE binary with our Harvester script embedded
- name: Build iPXE
  community.general.make:
    chdir: "{{ role_path }}/files/data/ipxe/src"
    target: bin/undionly.kpxe # The output file we want to create
    params:
      -j: # Use parallel jobs for faster build
      EMBED: harvester.ipxe # Embed our custom iPXE script

# Generate the Harvester configuration file
# This file will be used during the Harvester installation process
- name: Generate Harvester config
  ansible.builtin.template:
    src: harvester.yaml.j2 # Jinja2 template for Harvester config
    dest: "{{ role_path }}/files/data/harvester-config.yaml"
    mode: "0644"

# Generate the dnsmasq configuration
# dnsmasq will serve as our DHCP and TFTP server for PXE booting
- name: Generate dnsmasq config
  ansible.builtin.template:
    src: dnsmasq.conf.j2 # Jinja2 template for dnsmasq config
    dest: "{{ role_path }}/files/data/dnsmasq.conf"
    mode: "0644"

# Ensure containers are running
# This block checks if the required containers are running and starts them if needed
- name: Ensure containers are running
  block:
    - name: Check dnsmasq container
      containers.podman.podman_container_info:
        name: dnsmasq
      register: dnsmasq_info
    - name: Restart dnsmasq if not running
      containers.podman.podman_container:
        name: dnsmasq
        state: started
      when: dnsmasq_info.containers | length == 0 or dnsmasq_info.containers[0].State.Status != "running"
  rescue:
    - name: Handle container failure
      debug:
        msg: "Failed to ensure containers are running. Manual intervention may be required."
      failed_when: true

# Build a custom dnsmasq container image
# This allows us to have a dnsmasq server with our specific configuration
- name: Build dnsmasq image
  become: true # Require elevated privileges
  containers.podman.podman_image:
    name: dnsmasq
    path: "{{ role_path }}/files/dnsmasq" # Path to the Dockerfile and context
  register: dnsmasq_build
  retries: 3
  delay: 5
  until: dnsmasq_build is success

# Run the dnsmasq container
# This starts our DHCP and TFTP server for PXE booting
- name: Run dnsmasq container
  become: true
  containers.podman.podman_container:
    name: dnsmasq
    image: dnsmasq
    network: host # Use host networking for proper DHCP functionality
    ports:
      - "67:67/udp" # DHCP port
    volumes:
      - "{{ role_path }}/files/data/dnsmasq.conf:/etc/dnsmasq.conf" # Mount our custom config
      - "{{ role_path }}/files/data/ipxe/src/bin/undionly.kpxe:/srv/tftp/undionly.kpxe" # Mount iPXE binary
    cap_add:
      - NET_ADMIN # Required capabilities for DHCP
      - NET_RAW
    timeout: 1200
    rm: true # Remove the container when it exits
    state: started
  register: dnsmasq_container
  retries: 3
  delay: 5
  until: dnsmasq_container is success

# Run an nginx container
# This will serve the Harvester installation files over HTTP
- name: Run nginx container
  become: true
  containers.podman.podman_container:
    name: nginx
    image: nginx
    ports:
      - "80:80/tcp" # HTTP port
    volumes:
      - "{{ role_path }}/files/data/harvester.iso:/usr/share/nginx/html/harvester.iso"
      - "{{ role_path }}/files/data/harvester-vmlinuz:/usr/share/nginx/html/harvester-vmlinuz"
      - "{{ role_path }}/files/data/harvester-initrd:/usr/share/nginx/html/harvester-initrd"
      - "{{ role_path }}/files/data/harvester-rootfs:/usr/share/nginx/html/harvester-rootfs"
      - "{{ role_path }}/files/data/harvester-config.yaml:/usr/share/nginx/html/harvester-config.yaml"
    timeout: 1200
    rm: true
    state: started
  register: nginx_container
  retries: 3
  delay: 5
  until: nginx_container is success

# Add a cleanup task
# This task removes temporary files after the installation is complete
- name: Cleanup temporary files
  file:
    path: "{{ item }}"
    state: absent
  loop:
    - "{{ role_path }}/files/data/harvester.iso"
    - "{{ role_path }}/files/data/harvester-vmlinuz"
    - "{{ role_path }}/files/data/harvester-initrd"
    - "{{ role_path }}/files/data/harvester-rootfs"
    - "{{ role_path }}/files/data/harvester-config.yaml"
  when: cleanup_temp_files | default(true)

---
./roles/harvester_install/tasks/rollback.yml


---
# Rollback tasks for failed Harvester installation
# This playbook performs a comprehensive rollback of a failed Harvester installation
# on Dell servers managed via iDRAC. It aims to return the server to its pre-installation state.

# Step 0: Pre-rollback checks
- name: Perform pre-rollback checks
  block:
    - name: Check iDRAC connectivity
      dellemc.openmanage.idrac_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: idrac_check
      failed_when: idrac_check.failed
      retries: 3
      delay: 10

    - name: Verify rollback is necessary
      ansible.builtin.assert:
        that: not installation_completed | default(false)
        msg: "Rollback not necessary. Installation was marked as completed."

  rescue:
    - name: Log pre-rollback check failure
      ansible.builtin.debug:
        msg: "Pre-rollback checks failed. Manual intervention may be required."
      failed_when: true

# Step 1: Reset BIOS to default settings
- name: Reset BIOS to default settings
  dellemc.openmanage.idrac_bios:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    attributes:
      BootMode: "{{ original_boot_mode | default('Bios') }}"
      BootSeqRetry: "Disabled"
      FirstBootDevice: "{{ original_first_boot_device | default('HardDisk') }}"
  register: bios_reset_result
  retries: 3
  delay: 30
  until: bios_reset_result is success
  # Note: This uses original BIOS settings if they were captured before installation

# Step 2: Clear iDRAC job queue
- name: Clear iDRAC job queue
  dellemc.openmanage.idrac_job_queue:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    state: "clear"
  register: job_queue_clear_result
  retries: 3
  delay: 30
  until: job_queue_clear_result is success

# Step 3: Power off server
- name: Power off server
  dellemc.openmanage.idrac_power:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    state: "off"
  register: power_off_result
  retries: 3
  delay: 30
  until: power_off_result is success

# Step 4: Remove PXE boot configuration
- name: Remove PXE boot configuration
  block:
    - name: Remove DHCP reservation
      community.general.dnsmasq_conf:
        name: "pxe-{{ inventory_hostname }}"
        state: absent
      delegate_to: "{{ dhcp_server }}"

    - name: Remove iPXE configuration file
      ansible.builtin.file:
        path: "{{ tftp_root }}/pxelinux.cfg/01-{{ hostvars[inventory_hostname]['ansible_default_ipv4']['macaddress'] | replace(':', '-') }}"
        state: absent
      delegate_to: "{{ tftp_server }}"

  rescue:
    - name: Log PXE removal failure
      ansible.builtin.debug:
        msg: "Failed to remove PXE configuration. Manual cleanup may be required."

# Step 5: Remove Harvester partitions and restore original storage configuration
- name: Manage storage configuration
  block:
    - name: Get current storage configuration
      dellemc.openmanage.idrac_storage_volume_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: current_storage_info

    - name: Remove Harvester partitions
      dellemc.openmanage.idrac_storage_volume:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "absent"
        volumes:
          - controller: "{{ item.controller }}"
            operation: "remove"
            name: "{{ item.name }}"
      loop: "{{ current_storage_info.storage_volumes | selectattr('name', 'match', '^harvester_.*') | list }}"
      when: current_storage_info.storage_volumes | selectattr('name', 'match', '^harvester_.*') | list | length > 0

    - name: Restore original storage configuration
      dellemc.openmanage.idrac_storage_volume:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
        state: "present"
        volumes: "{{ original_storage_config }}"
      when: original_storage_config is defined

  rescue:
    - name: Log storage configuration failure
      ansible.builtin.debug:
        msg: "Failed to manage storage configuration. Manual intervention required."
      failed_when: true

# Step 6: Remove Harvester-related files
- name: Remove Harvester-related files
  block:
    - name: Identify Harvester-related files
      ansible.builtin.find:
        paths: "{{ item }}"
        patterns: "harvester*"
        recurse: yes
      loop:
        - "/boot"
        - "/var/lib"
      register: harvester_files

    - name: Remove identified Harvester files
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: absent
      loop: "{{ harvester_files.files }}"

  rescue:
    - name: Log file removal failure
      ansible.builtin.debug:
        msg: "Failed to remove all Harvester-related files. Manual cleanup may be needed."

# Step 7: Reset iDRAC to default settings
- name: Reset iDRAC to default settings
  dellemc.openmanage.idrac_reset:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    reset_type: "default"
  register: idrac_reset_result
  retries: 3
  delay: 30
  until: idrac_reset_result is success

# Step 8: Restore original network configuration
- name: Restore original network configuration
  dellemc.openmanage.idrac_network:
    idrac_ip: "{{ inventory_hostname }}"
    idrac_user: "{{ idrac_creds.username }}"
    idrac_password: "{{ idrac_creds.password }}"
    setup_idrac: "{{ original_network_config }}"
  when: original_network_config is defined

# Step 9: Log rollback completion
- name: Log rollback completion
  ansible.builtin.debug:
    msg: "Rollback completed for {{ inventory_hostname }} at {{ ansible_date_time.iso8601 }}"

# Step 10: Send detailed notification of failed installation and rollback
- name: Send notification of failed installation and rollback
  ansible.builtin.mail:
    to: "{{ admin_email }}"
    subject: "Harvester installation failed on {{ inventory_hostname }} - Rollback completed"
    body: |
      The Harvester installation on {{ inventory_hostname }} has failed and a rollback has been performed.

      Rollback actions taken:
      - Pre-rollback checks performed
      - BIOS reset to original or default settings
      - iDRAC job queue cleared
      - Server powered off
      - PXE boot configuration removed
      - Harvester partitions removed
      - Original storage configuration restored (if applicable)
      - Harvester-related files removed
      - iDRAC reset to default settings
      - Original network configuration restored (if applicable)

      Rollback completed at: {{ ansible_date_time.iso8601 }}

      Please check the system and logs for more information. Manual verification and additional cleanup may be necessary.

      Server Details:
      - Hostname: {{ inventory_hostname }}
      - Service Tag: {{ idrac_check.idrac_info.system_info.service_tag }}
      - Model: {{ idrac_check.idrac_info.system_info.model }}
      - iDRAC Version: {{ idrac_check.idrac_info.firmware_version }}

      For any questions or concerns, please contact the infrastructure team.
  delegate_to: localhost

# Step 11: Update inventory
- name: Update inventory
  ansible.builtin.add_host:
    name: "{{ inventory_hostname }}"
    groups: "rollback_completed"
    ansible_host: "{{ ansible_host }}"
  changed_when: true

# Step 12: Verify rollback
- name: Verify rollback
  block:
    - name: Check server power state
      dellemc.openmanage.idrac_power_state_info:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: final_power_state

    - name: Verify BIOS settings
      dellemc.openmanage.idrac_bios:
        idrac_ip: "{{ inventory_hostname }}"
        idrac_user: "{{ idrac_creds.username }}"
        idrac_password: "{{ idrac_creds.password }}"
      register: final_bios_settings

    - name: Log verification results
      ansible.builtin.debug:
        msg: |
          Rollback verification results for {{ inventory_hostname }}:
          - Power State: {{ final_power_state.power_state }}
          - BIOS Mode: {{ final_bios_settings.current_bios_settings.BootMode }}
          - First Boot Device: {{ final_bios_settings.current_bios_settings.FirstBootDevice }}

  rescue:
    - name: Log verification failure
      ansible.builtin.debug:
        msg: "Failed to verify rollback state. Manual verification recommended."
      failed_when: true

- name: Notify monitoring system of rollback
  uri:
    url: "{{ monitoring_system_url }}/api/alert"
    method: POST
    body_format: json
    body:
      host: "{{ inventory_hostname }}"
      alert_type: "harvester_install_rollback"
      message: "Harvester installation rolled back on {{ inventory_hostname }}"
  delegate_to: localhost
# Note: Additional steps may be necessary depending on your specific environment and requirements.
# Consider adding tasks for:
# - Updating monitoring systems
# - Adjusting capacity planning tools
# - Updating documentation or CMDBs
# - Performing any site-specific cleanup or restoration tasks

---
./roles/harvester_install/handlers/main.yml


---
# ./roles/harvester_install/handlers/main.yml

# Handlers for Harvester Installation
#
# This file contains handlers that can be triggered by tasks in the Harvester installation playbook.
# Handlers are only run if they are notified by a task, and they run at the end of the play after all tasks are complete.
# They are useful for actions that may need to happen only once, regardless of how many times they are notified.
#
# Usage:
#   To use these handlers, tasks should include a 'notify' statement. For example:
#   - name: Some task
#     ansible.builtin.command: do_something
#     notify: Restart dnsmasq service

# Restart the dnsmasq service
# This handler is useful when the dnsmasq configuration has been changed
- name: Restart dnsmasq service
  ansible.builtin.systemd:
    name: dnsmasq
    state: restarted
  become: true
  listen: "restart dnsmasq"

# Restart the nginx service
# This handler is useful when Harvester files served by nginx have been updated
- name: Restart nginx service
  ansible.builtin.systemd:
    name: nginx
    state: restarted
  become: true
  listen: "restart nginx"

# Log successful installation
# This handler creates a log entry when Harvester is successfully installed
- name: Log successful installation
  ansible.builtin.lineinfile:
    path: "/var/log/harvester_installations.log"
    line: "{{ ansible_date_time.iso8601 }} - Harvester successfully installed on {{ inventory_hostname }}"
    create: yes
  delegate_to: localhost
  become: true
  listen: "log installation success"

# Send email notification
# This handler sends an email when Harvester installation is complete
- name: Send email notification
  ansible.builtin.mail:
    to: "{{ admin_email }}"
    subject: "Harvester installation completed on {{ inventory_hostname }}"
    body: "Harvester has been successfully installed on {{ inventory_hostname }} at {{ ansible_date_time.iso8601 }}"
  delegate_to: localhost
  listen: "send email notification"

# Update monitoring system
# This handler updates an external monitoring system about the installation status
- name: Update monitoring system
  ansible.builtin.uri:
    url: "{{ monitoring_system_url }}/api/update"
    method: POST
    body_format: json
    body:
      host: "{{ inventory_hostname }}"
      status: "Harvester installed"
      timestamp: "{{ ansible_date_time.iso8601 }}"
  delegate_to: localhost
  listen: "update monitoring"

# Reboot server
# This handler reboots the server, which may be necessary after certain configuration changes
- name: Reboot server
  ansible.builtin.reboot:
    reboot_timeout: 600
  become: true
  listen: "reboot server"

# Cleanup installation files
# This handler removes temporary files used during the installation process
- name: Cleanup installation files
  ansible.builtin.file:
    path: "{{ role_temp_dir }}"
    state: absent
  become: true
  listen: "cleanup files"

# Refresh inventory
# This handler refreshes the Ansible inventory to reflect any changes made during installation
- name: Refresh inventory
  ansible.builtin.meta: refresh_inventory
  listen: "refresh inventory"

# Log installation failure
# This handler logs information about failed installations
- name: Log installation failure
  ansible.builtin.lineinfile:
    path: "/var/log/harvester_installation_failures.log"
    line: "{{ ansible_date_time.iso8601 }} - Harvester installation failed on {{ inventory_hostname }} - Error: {{ installation_error | default('Unknown error') }}"
    create: yes
  delegate_to: localhost
  become: true
  listen: "log installation failure"

# Notify Slack channel
# This handler sends a message to a Slack channel about the installation status
- name: Notify Slack
  community.general.slack:
    token: "{{ slack_token }}"
    msg: "Harvester installation on {{ inventory_hostname }} completed with status: {{ installation_status }}"
    channel: "#server-installations"
  delegate_to: localhost
  listen: "notify slack"
#
# To use these handlers in your tasks, add a notify statement to the relevant tasks.
#
# For example:
#
# - name: Install Harvester
#   ansible.builtin.command: some_installation_command
#   register: install_result
#   notify:
#     - "log installation success"
#     - "send email notification"
#     - "update monitoring"
#     - "cleanup files"
#     - "refresh inventory"
#     - "notify slack"
#   when: install_result is success

# - name: Handle installation failure
#   ansible.builtin.fail:
#     msg: "Installation failed"
#   notify:
#     - "log installation failure"
#     - "send email notification"
#     - "update monitoring"
#     - "notify slack"
#   when: install_result is failed

---
./roles/harvester_install/vars/main.yml


---
# Role-specific variables for Harvester installation
#
# This file contains variables specific to the Harvester installation role.
# These variables are used across various tasks in the role to customize
# the installation process and define important settings.

# Temporary directory for storing files during installation
# This directory will be used to store downloaded files, generated configs, etc.
role_temp_dir: "/tmp/harvester_install"

# Number of days to retain installation logs
# Logs older than this will be automatically removed
log_retention_days: 30

# URL of the monitoring system
# This is used to send alerts and updates about the installation process
monitoring_system_url: "http://monitoring.example.com"

# Minimum required iDRAC firmware version
# The installation will fail if the iDRAC firmware is older than this version
dell_idrac_version_min: "4.40.00.00"

# BIOS settings required for Harvester
# These settings will be applied to each server before installation
dell_bios_settings:
  - name: "ProcVirtualization"
    value: "Enabled"
  - name: "SriovGlobalEnable"
    value: "Enabled"
  - name: "SystemProfile"
    value: "PerfOptimized"

# Power profile for Dell servers
# This setting optimizes the server's power consumption and performance
dell_power_profile: "MaxPerformance"

# Minimum network bandwidth required for installation (in Mbps)
# The installation will fail if the available bandwidth is less than this value
min_network_bandwidth: 1000

# Cleanup configuration
# Set to true to remove temporary files after installation
cleanup_temp_files: true

# SSL verification for iDRAC connections
# Set to false for testing, but should be true in production environments
idrac_ssl_verify: false

# Email address for admin notifications
# Installation status and errors will be sent to this address
admin_email: "admin@example.com"

# Harvester cluster configuration
cluster_token: "your_secure_cluster_token_here"
cluster_vip: "10.0.0.100"

# Network configuration
netmask: "255.255.255.0"
gateway: "192.168.1.1"
dns_servers: "8.8.8.8,8.8.4.4"
ntp_servers: "0.pool.ntp.org,1.pool.ntp.org"

# SSH public key for Harvester nodes
# This key will be authorized for SSH access to Harvester nodes
ssh_public_key: "ssh-rsa AAAAB... your_public_key_here"

# Timeouts and retry counts
api_check_retries: 60
api_check_delay: 10
installation_timeout: 3600
network_check_timeout: 60

# System requirements
min_disk_space: 100000 # Minimum required disk space in MB
max_network_latency: 20 # Maximum acceptable network latency in ms

# iDRAC Credentials
# WARNING: Storing credentials in plain text is not secure. Consider using Ansible Vault.
idrac_credentials:
  username: "your_idrac_username"
  password: "your_idrac_password"

# Harvester Configuration
harvester:
  version: "v1.3.1"

# PXE and Harvester Specific Configuration
pxe_harvester_mgmt_interface: "eno1"
pxe_harvester_vip: "10.0.20.20"
pxe_harvester_vip_mac: "00:11:22:33:44:55"
pxe_harvester_osdisk: "/dev/sda"
pxe_harvester_datadisk: "/dev/sdb"

# Performance Tuning
dell_fan_speed_offset: "High"

# Additional System Requirements
min_cpu_count: 4
min_memory_gb: 32
min_disk_space_gb: 120

# Monitoring Configuration
monitoring:
  slack_webhook: "https://hooks.slack.com/services/YOUR/SLACK/WEBHOOK"

# Storage Configuration
storage:
  nfs_server: "10.0.0.50"
  nfs_path: "/exports/harvester"

# API Configuration
api:
  rancher_token: "your_rancher_api_token"

# iDRAC Configuration
idrac_change_password: false
idrac_new_password: "NewSecurePassword123!"

configure_raid: false
configure_idrac_network: false
configure_idrac_users: false

idrac_gateway: "192.168.1.1"

idrac_users:
  - username: "admin"
    password: "AdminPassword123!"
    privilege: "Administrator"
  - username: "operator"
    password: "OperatorPassword123!"
    privilege: "Operator"
